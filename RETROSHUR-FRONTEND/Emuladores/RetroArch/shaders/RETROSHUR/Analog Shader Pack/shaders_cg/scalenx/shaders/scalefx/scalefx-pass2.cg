/*
	ScaleFX - Pass 2
	by Sp00kyFox, 2016

Filter:	Nearest
Scale:	1x

ScaleFX is an improvement of the original Scale3x filter.

Pass 2 resolves ambiguous configurations of edge candidates at pixel junctions.

*/


#pragma parameter CLR   "ScaleFX Color Thresh"  0.35 0.0 1.00 0.01

#ifdef PARAMETER_UNIFORM
	uniform float CLR;
#else
	#define CLR   0.35
#endif


static float THR = 1.0 - CLR;

// store three bool4 in one float4
float4 save(bool4 edge, bool4 hori, bool4 vert){
	return (float4(edge) + 2.0 * float4(hori) + 4.0 * float4(vert)) / 7.0;	
}

// soft edge = threshold condition
float4 soft(float4 edg, float4 org){
	return (edg > max(org, org.wxyz) && edg >= THR) ? edg : 0.0;
}

// hard edge = soft edge & EPX condition 
float4 hard(float4 edg, float4 soft){
	return (edg > max(edg.wxyz, edg.yzwx) && soft != 0.0) ? edg : 0.0;
}


struct input
{
	float2 video_size;
	float2 texture_size;
	float2 output_size;
};

struct prev
{
	sampler2D texture;
};

struct out_vertex {
	float4 position : POSITION;
	float2 texCoord : TEXCOORD0;
	float4 t1 : TEXCOORD1;
	float4 t2 : TEXCOORD2;
	float4 t3 : TEXCOORD3;
};

/*    VERTEX_SHADER    */
out_vertex main_vertex
(
	float4 position	: POSITION,
	float2 texCoord : TEXCOORD0,

   	uniform float4x4 modelViewProj,
	uniform input IN
)
{
	out_vertex OUT;

	OUT.position = mul(modelViewProj, position);

	float2 ps = 1.0/IN.texture_size;
	float dx = ps.x, dy = ps.y;

	OUT.texCoord = texCoord;
	OUT.t1 = texCoord.xxxy + float4(    -dx,   0, dx,  -dy);	// A, B, C
	OUT.t2 = texCoord.xxxy + float4(    -dx,   0, dx,    0);	// D, E, F
	OUT.t3 = texCoord.xxxy + float4(    -dx,   0, dx,   dy);	// G, H, I

	return OUT;
}


float4 main_fragment(in out_vertex VAR, uniform sampler2D decal : TEXUNIT0, uniform input IN, prev PASSPREV2) : COLOR
{

	/*
		A B C		x   y
		D E F
		G H I		w   z
	*/


	// edge distances
	float4 Ae = tex2D(PASSPREV2.texture, VAR.t1.xw), Be = tex2D(PASSPREV2.texture, VAR.t1.yw), Ce = tex2D(PASSPREV2.texture, VAR.t1.zw);
	float4 De = tex2D(PASSPREV2.texture, VAR.t2.xw), Ee = tex2D(PASSPREV2.texture, VAR.t2.yw), Fe = tex2D(PASSPREV2.texture, VAR.t2.zw);
	float4 Ge = tex2D(PASSPREV2.texture, VAR.t3.xw), He = tex2D(PASSPREV2.texture, VAR.t3.yw), Ie = tex2D(PASSPREV2.texture, VAR.t3.zw);

	// origin distances
	float4 Ao = tex2D(decal, VAR.t1.xw), Bo = tex2D(decal, VAR.t1.yw), Co = tex2D(decal, VAR.t1.zw);
	float4 Do = tex2D(decal, VAR.t2.xw), Eo = tex2D(decal, VAR.t2.yw), Fo = tex2D(decal, VAR.t2.zw);
	float4 Go = tex2D(decal, VAR.t3.xw), Ho = tex2D(decal, VAR.t3.yw), Io = tex2D(decal, VAR.t3.zw);


	// soft edges (threshold)
	float4 As = soft(Ae, Ao), Bs = soft(Be, Bo), Cs = soft(Ce, Co);
	float4 Ds = soft(De, Do), Es = soft(Ee, Eo), Fs = soft(Fe, Fo);
	float4 Gs = soft(Ge, Go), Hs = soft(He, Ho), Is = soft(Ie, Io);
	
	// hard edges (soft & EPX)
	float4 Ah = hard(Ae, As), Bh = hard(Be, Bs), Ch = hard(Ce, Cs);
	float4 Dh = hard(De, Ds), Eh = hard(Ee, Es), Fh = hard(Fe, Fs);
	float4 Gh = hard(Ge, Gs), Hh = hard(He, Hs), Ih = hard(Ie, Is);


	// soft & hard junctions
	float4 jSa = float4(As.z, Bs.w, Es.x, Ds.y), jHa = float4(Ah.z, Bh.w, Eh.x, Dh.y);
	float4 jSb = float4(Bs.z, Cs.w, Fs.x, Es.y), jHb = float4(Bh.z, Ch.w, Fh.x, Eh.y);
	float4 jSc = float4(Es.z, Fs.w, Is.x, Hs.y), jHc = float4(Eh.z, Fh.w, Ih.x, Hh.y);
	float4 jSd = float4(Ds.z, Es.w, Hs.x, Gs.y), jHd = float4(Dh.z, Eh.w, Hh.x, Gh.y);

	// resolve formula for ambiguous junctions
	bool4 ja = jHa > jHa.yzwx && (jHa > jHa.wxyz && (jHa.yzwx <= jHa.zwxy || jHa.wxyz <= jHa.zwxy) || jHa.zwxy > jHa.yzwx) || jHa > jHa.wxyz && jHa.zwxy > jHa.wxyz;
	bool4 jb = jHb > jHb.yzwx && (jHb > jHb.wxyz && (jHb.yzwx <= jHb.zwxy || jHb.wxyz <= jHb.zwxy) || jHb.zwxy > jHb.yzwx) || jHb > jHb.wxyz && jHb.zwxy > jHb.wxyz;
	bool4 jc = jHc > jHc.yzwx && (jHc > jHc.wxyz && (jHc.yzwx <= jHc.zwxy || jHc.wxyz <= jHc.zwxy) || jHc.zwxy > jHc.yzwx) || jHc > jHc.wxyz && jHc.zwxy > jHc.wxyz;
	bool4 jd = jHd > jHd.yzwx && (jHd > jHd.wxyz && (jHd.yzwx <= jHd.zwxy || jHd.wxyz <= jHd.zwxy) || jHd.zwxy > jHd.yzwx) || jHd > jHd.wxyz && jHd.zwxy > jHd.wxyz;

	// inject soft edges without creating new contradictions
	bool4 res;
	res.x = ja.z || !(ja.y || ja.w) && (ja.x && jSa.z != 0.0 || (jSa.z > jSa.w && (jSa.z > jSa.y && (jSa.w <= jSa.x || jSa.y <= jSa.x) || jSa.x > jSa.w) || jSa.z > jSa.y && jSa.x > jSa.y));
	res.y = jb.w || !(jb.z || jb.x) && (jb.y && jSb.w != 0.0 || (jSb.w > jSb.x && (jSb.w > jSb.z && (jSb.x <= jSb.y || jSb.z <= jSb.y) || jSb.y > jSb.x) || jSb.w > jSb.z && jSb.y > jSb.z));
	res.z = jc.x || !(jc.w || jc.y) && (jc.z && jSc.x != 0.0 || (jSc.x > jSc.y && (jSc.x > jSc.w && (jSc.y <= jSc.z || jSc.w <= jSc.z) || jSc.z > jSc.y) || jSc.x > jSc.w && jSc.z > jSc.w));
	res.w = jd.y || !(jd.x || jd.z) && (jd.w && jSd.y != 0.0 || (jSd.y > jSd.z && (jSd.y > jSd.x && (jSd.z <= jSd.w || jSd.x <= jSd.w) || jSd.w > jSd.z) || jSd.y > jSd.x && jSd.w > jSd.x));


	bool4 resH = bool4(ja.z, jb.w, jc.x, jd.y);

	// single pixel detection
	res = all(res) ? resH : res;

	// end of line detection
	res = res && (resH || !(res.wxyz && res.yzwx));	


	// output
	bool4 jct  = bool4(all(jSa == 0.0), all(jSb == 0.0), all(jSc == 0.0), all(jSd == 0.0));
	bool4 hori = bool4(Eo.x < Eo.w, Eo.x < Eo.y, Eo.z < Eo.y, Eo.z < Eo.w) && jct;
	bool4 vert = bool4(Eo.x > Eo.w, Eo.x > Eo.y, Eo.z > Eo.y, Eo.z > Eo.w) && jct;

	return save(res, hori, vert);

}
