/*
    Motion Blur Glow
    Authors: hunterk, cgwg, harlequin
 
    This program is free software; you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by the Free
    Software Foundation; either version 2 of the License, or (at your option)
    any later version.
*/

struct previous
{
   uniform sampler2D texture;
   float2 tex_coord;
};

struct input
{
    float2 video_size;
    float2 texture_size;
    float2 output_size;
    float frame_count;
    float frame_direction;
    float frame_rotation;
    sampler2D texture : TEXUNIT0;
};

struct tex_coords
{
   float2 tex;
   float2 prev;
   float2 prev1;
   float2 prev2;
   float2 prev3;
   float2 prev4;
   float2 prev5;
   float2 prev6;
};

void main_vertex
(
   float4 position : POSITION,
   out float4 oPosition : POSITION,
   uniform float4x4 modelViewProj,
   float2 tex : TEXCOORD,

   previous PREV,
   previous PREV1,
   previous PREV2,
   previous PREV3,
   previous PREV4,
   previous PREV5,
   previous PREV6,
   out tex_coords coords
)
{
   oPosition = mul(modelViewProj, position);
   coords = tex_coords(tex, PREV.tex_coord,
      PREV1.tex_coord,
      PREV2.tex_coord,
      PREV3.tex_coord,
      PREV4.tex_coord,
      PREV5.tex_coord,
      PREV6.tex_coord);
}

struct output 
{
  float4 col    : COLOR;
};

output main_fragment( float2 texCoord : TEXCOORD0,
uniform input IN,
      previous PREV,
      previous PREV1,
      previous PREV2,
      previous PREV3,
      previous PREV4,
      previous PREV5,
      previous PREV6
)
{
    fixed2 texel = fixed2(1.0 / IN.texture_size);
    fixed2 lower_bound = float2(0.0);
    fixed2 upper_bound = texel * (IN.output_size - 1.0);

    float offsets[5] = float[](0.0, 1.0, 2.0, 3.0, 4.0);
    fixed weights[5] = fixed[](0.22702703, 0.19459459, 0.12162162, 0.05405405, 0.01621621);    //calculated from pascal triangle, normalized to 1 to prevent darkening

    fixed4 out_color = tex2D(IN.texture, clamp(texCoord, lower_bound, upper_bound)) * weights[0];

    for (int i = 1; i < 5; i++) 
    {
    out_color += tex2D(IN.texture, clamp(texCoord + fixed2(0.0, offsets[i] * texel.y), lower_bound, upper_bound)) * weights[i];
    out_color += tex2D(IN.texture, clamp(texCoord - fixed2(0.0, offsets[i] * texel.y), lower_bound, upper_bound)) * weights[i];
    out_color += tex2D(IN.texture, clamp(texCoord + fixed2(offsets[i] * texel.x, 0.0), lower_bound, upper_bound)) * weights[i];
    out_color += tex2D(IN.texture, clamp(texCoord - fixed2(offsets[i] * texel.x, 0.0), lower_bound, upper_bound)) * weights[i]; 
    out_color /= 1.15; //keeps it from getting to bloomy
 }
    
   float4 color = ((1.0 * out_color) + tex2D(PREV6.texture, texCoord)) / 2.0;
   color = (color * (1.0 * out_color) + tex2D(PREV5.texture, texCoord)) / 2.0;
   color = (color * (1.0 * out_color) + tex2D(PREV4.texture, texCoord)) / 2.0;
   color = (color * (1.0 * out_color) + tex2D(PREV3.texture, texCoord)) / 2.0;
   color = (color * (1.0 * out_color) + tex2D(PREV2.texture, texCoord)) / 2.0;
   color = (color * (1.0 * out_color) + tex2D(PREV1.texture, texCoord)) / 2.0;
   color = (color * (1.0 * out_color) + tex2D(PREV.texture, texCoord)) / 2.0;
   color = (color + tex2D(IN.texture, texCoord)) / 2.0;
   
output OUT;
OUT.col = color;
return OUT;
}