[code]
20:58:31:962 | RL |      INFO  | +N/A   | Main - RocketLauncher v1.1.1.1 (www.rlauncher.com)
20:58:32:029 | RL |      INFO  | +62    | Main - System Specs:
					RocketLauncher Dir: D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher
					RocketLauncher is: 32-bit
					OS: Microsoft Windows 10 Pro
					SKU: Professional
					Total Memory: 16332.66 MB
					Free Memory: 10101.82 MB
					Used Memory: 6230.832 MB
					SystemType: 64-bit
					Physical Processors: 1
					Logical Processors: 8
					GPU 1 Name: NVIDIA GeForce GTX 1070
					GPU 1 RAM: -1.00 MB
					GPU 1 Driver Version: 22.21.13.8541
					Sound 1 Device: NVIDIA High Definition Audio
					Sound 1 Status: Enabled
					Sound 2 Device: Steam Streaming Microphone
					Sound 2 Status: Enabled
					Sound 3 Device: Steam Streaming Speakers
					Sound 3 Status: Enabled
					Sound 4 Device: NVIDIA Virtual Audio Device (Wave Extensible) (WDM)
					Sound 4 Status: Enabled
					Sound 5 Device: Realtek High Definition Audio
					Sound 5 Status: Enabled
					Sound 6 Device: AnvSoft Virtual Sound Device
					Sound 6 Status: Enabled
					Sound 7 Device: VB-Audio VoiceMeeter VAIO
					Sound 7 Status: Enabled
					Sound 8 Device: XSplit  Stream  Audio  Renderer
					Sound 8 Status: Enabled
					Sound 9 Device: VB-Audio VoiceMeeter AUX VAIO
					Sound 9 Status: Enabled
					Sound 10 Device: VB-Audio Virtual Cable
					Sound 10 Status: Enabled
					Sound 11 Device: Wirecast Virtual Microphone Driver
					Sound 11 Status: Enabled
					OS Language: Spanish_Modern_Sort
					System Locale: es-ES
					Formats Locale: es-ES
					Windows UI Language: es-ES
					Text Encoding: Windows-1252
					OS Admin Status: No
					RL Compatibility Flags: 
					Latest .Net Version: v4.0.30319
					Monitor #1 (\\.\DISPLAY1): 1920x1080 (1920x1040 work) [32bit] [60hz] [Landscape]  (Primary)
					Current AHK Desktop Width: 1920
					Current AHK Desktop Height: 1080
					Monitor #1 DPI: 100
					ErrorMode: 0
					AutoHotkey Path: C:\Program Files\AutoHotkey\AutoHotkey.exe
					AHK Version: 1.1.13.00
					Unicode: No
20:58:32:029 | RL |      INFO  | +0     | CheckFile - Checking if D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher\RocketLauncher.exe exists
20:58:32:029 | RL |      INFO  | +0     | Main - Raw CLI received: "-s Nintendo Entertainment System -r D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Roms\nes\8 Eyes (USA).zip"
20:58:32:029 | RL |   WARNING  | +0     | Main - Front End plugin was not sent via CLI. Defaulting to the "HyperSpin" Plugin. If you want to load a different Front End Plugin, please make sure you set up your Front End so it sends this parameter to RocketLauncher: "-p <PLUGINTYPE>"
20:58:32:029 | RL |      INFO  | +0     | CheckFile - Checking if D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher\Plugins\HyperSpin.plugin exists
20:58:32:030 | RL |      INFO  | +0     | Process.Process - "Exist" "RocketLauncherUI.exe" 
20:58:32:034 | RL |      INFO  | +0     | Main - Detected RocketLauncherUI.exe is currently running
20:58:32:035 | RL |      INFO  | +0     | Main - RocketLauncherUI.exe coordinates are x48 y35 w1262 h960
20:58:32:035 | RL |      INFO  | +0     | Main - RocketLauncher received "Nintendo Entertainment System" and "8 Eyes (USA)"
20:58:32:039 | RL |      INFO  | +16    | Main - Did not find a "D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher\Settings\Nintendo Entertainment System\Game Options.ini" file, skipping any game-specific options.
20:58:32:039 | RL |      INFO  | +0     | Main - 8 Eyes (USA) is using the default emulator: RetroArch
20:58:32:039 | RL |      INFO  | +0     | Main - Checking for a [RetroArch] section in D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher\Settings\Nintendo Entertainment System\Emulators.ini
20:58:32:039 | RL |      INFO  | +0     | Main - Checking for a [RetroArch] section in D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher\Settings\Global Emulators.ini
20:58:32:040 | RL |      INFO  | +0     | Main - Found [RetroArch] in D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher\Settings\Global Emulators.ini
20:58:32:040 | RL |      INFO  | +0     | CheckFile - Checking if D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher\Modules\RetroArch\RetroArch.ahk exists
20:58:32:043 | RL |   WARNING  | +0     | Main - CRC Check - CRC does not match official module and will not be supported. Continue using at your own risk.
20:58:32:043 | RL |      INFO  | +0     | Main - 8 Eyes (USA) will use module: D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher\Modules\RetroArch\RetroArch.ahk
20:58:32:045 | RL |   WARNING  | +0     | RIniLoadVar - Created missing Global ini key: "Fade_Click_Through " in section: "Fade" in "D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher\Settings\Global RocketLauncher.ini"
20:58:32:045 | RL |   WARNING  | +0     | RIniLoadVar - Created missing System ini key: "Fade_Click_Through " in section: "Fade" in "D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher\Settings\Nintendo Entertainment System\RocketLauncher.ini"
20:58:32:075 | RL |      INFO  | +31    | Main - Using standard method with "Rom Extension" SkipChecks or without any SkipChecks.
20:58:32:078 | RL |      INFO  | +0     | CheckFile - Checking if D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RetroArch\retroarch.exe exists
20:58:32:078 | RL |      INFO  | +0     | Main - INI Keys read
20:58:32:078 | RL |      INFO  | +0     | CheckFile - Checking if D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Herramientas\7-Zip\7z.exe exists
20:58:32:079 | RL |      INFO  | +0     | CheckFile - Checking if D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Herramientas\7-Zip\7z.dll exists
20:58:32:085 | RL |      INFO  | +16    | Main - "8 Eyes (USA)" does not qualify for MultiGame. Only roms with any of these strings in their name are acceptable: \(Disc|\(Disk|\(Cart|\(Tape|\(Cassette|\(Part|\(Side
20:58:32:085 | RL |      INFO  | +0     | CheckPaths - Started
20:58:32:085 | RL |      INFO  | +0     | CheckPaths - Not scanning to find the rom because a full path was supplied to RocketLauncher via CLI
20:58:32:085 | RL |      INFO  | +0     | CheckPaths - Ended
20:58:32:086 | RL |      INFO  | +0     | BuildScript - User Variables:
					;----------------------------------------------------------------------------
					; INJECTED VARIABLES
					;----------------------------------------------------------------------------
					
					#NoTrayIcon
					#InstallKeybdHook
					MiscUtils.DetectHiddenWindows("On")
					SetTitleMatchMode, 2
					SendMode, Event
					0 = 4
					rlPath = D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher
					pluginPath = D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher\Plugins
					pluginName = HyperSpin
					pluginExt = .plugin
					contextOnExit = 
					rlMode = 
					rlTitle = RocketLauncher
					rlVersion = 1.1.1.1
					rlAuthor = djvj
					rlURL = www.rlauncher.com
					langFile = D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher\Data\Language\Localization.ini
					primMonitor = 1
					frontendPID = 10068
					frontendPath = D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher\RocketLauncherUI
					frontendExe = RocketLauncherUI.exe
					frontendExt = exe
					frontendName = RocketLauncherUI
					frontendDrive = D
					exitEmulatorKey = ~Esc
					restoreFE = false
					exitScriptKey = ~q & ~s
					toggleCursorKey = ~e & ~t
					emuFullPath = D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RetroArch\retroarch.exe
					emuPath = D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RetroArch
					emuName = RetroArch
					emuExt = exe
					baseRomPath = D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Roms\Nintendo Entertainment System
					romPath = D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Roms\nes
					romPathFromIni = D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Roms\nes|D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Roms\Nintendo Entertainment System
					romExtension = .zip
					romExtensionOrig = .zip
					romExtensions = 7z|rar|zip|sfc|gba|gb|a78|sv|gbc|rpk|gme|sc|cdt|ws|wsc|ngp|ngc|vms|ipf|n64|z64|sg|fds|caq|vb|vec|wav|cas|min|int|rom|tap|tzx|nes|col|nds|cpr|gg|pce|st2|sms|smc|lnx|md|32x|n64|a52|j64|cso|cue|iso|ccd|chd|bin|dsk|pbp|d64|t64
					executable = retroarch.exe
					systemDbName = Nintendo Entertainment System
					systemName = Nintendo Entertainment System
					dbPath = D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Roms\nes
					dbName = 8 Eyes (USA)
					dbExt = zip
					romName = 8 Eyes (USA)
					romMapPath = 
					romMappingEnabled = false
					romMappingLaunchMenuEnabled = false
					romMappingFirstMatchingExt = false
					romMappingShowAllRomsInArchive = true
					romMappingNumberOfGamesByScreen = 7
					romMappingHideParent = false
					romMappingMenuWidth = 400
					romMappingMenuMargin = 65
					romMappingTextFont = Bebas Neue
					romMappingTextOptions = cFFFFFFFF r4 s60 Bold
					romMappingDisabledTextColor = ff888888
					romMappingTextSizeDifference = 7
					romMappingTextMargin = 15
					romMappingTitleTextFont = Bebas Neue
					romMappingTitleTextOptions = cFFFFFFFF r4 s90 Bold
					romMappingTitle2TextFont = Bebas Neue
					romMappingTitle2TextOptions = cFFFFFFFF r4 s22 Bold
					romMappingGameInfoTextFont = Bebas Neue
					romMappingGameInfoTextOptions = cFFFFFFFF r4 s22 Regular
					romMappingGameNameTextFont = Bebas Neue
					romMappingGameNameTextOptions = cFFFFFFFF r4 s40 Regular
					romMappingBackgroundBrush = aa000000
					romMappingColumnBrush = 33000000
					romMappingButtonBrush1 = 6f000000
					romMappingButtonBrush2 = 33000000
					romMappingBackgroundAlign = Stretch and Lose Aspect
					romMappingMenuFlagWidth = 55
					romMappingMenuFlagSeparation = 7
					romMappingDefaultMenuList = FullList
					romMappingSingleFilteredRomAutomaticLaunch = false
					altArchiveNameOnly = 
					altRomNameOnly = 
					altArchiveAndRomName = 
					altArchiveAndManyRomNames = 
					altRomNamesOnly = 
					romMapScenario = 
					skipchecks = false
					romMatchExt = false
					blockInputTime = 0
					blockInputFile = D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher\Module Extensions\BlockInput.exe
					errorLevelReporting = false
					lockLaunch = false
					lockLaunchGame = 
					screenRotationAngle = 0
					screenRotationAngleGame = 
					setResolution = 
					logFile = 
					logLabel := ["    INFO"," WARNING","   ERROR","   DEBUG","   TRACE"]
					logLevel = 3
					logShowDebugConsole = false
					logShowCommandWindow = false
					logCommandWindow = false
					logIncludeModule = true
					logIncludeFileProperties = true
					logIncludeDLLLogs = false
					errorSounds = true
					rlDebugConsoleStdout = 
					sysLang = Spanish_Modern_Sort
					sysType = 64-bit
					broadcastWindowTitle = 
					navUpKey = Up
					navDownKey = Down
					navLeftKey = Left
					navRightKey = Right
					navSelectKey = Enter
					navP2UpKey = Numpad8
					navP2DownKey = Numpad2
					navP2LeftKey = Numpad4
					navP2RightKey = Numpad6
					navP2SelectKey = NumpadEnter
					originalWidth = 1920
					originalHeight = 1080
					vdEnabled = false
					vdFullPath = 
					vdUseSCSI = false
					vdDriveLetter = 
					vdDriveLetterScsi = 
					vdAddDrive = false
					demulShooterPath = 
					servoStikEnabled = false
					servoStikExitMode = false
					ledblinkyEnabled = false
					ledblinkySystemName = 
					ledblinkyFullPath = 
					ledblinkyProfilePath = D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher\Profiles\LEDBlinky
					ledblinkyRLProfile = D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher\Profiles\LEDBlinky\RocketLauncher
					winIPACFullPath = 
					ultraMapEnabled = false
					ultraMapFullPath = 
					emuIdleShutdown = 0
					launchPasswordHash = UpUpDownDownLeftRightLeftRight
					hideCursor = true
					hideEmu = false
					hideFE = false
					suspendFE = false
					fadeIn = true
					fadeInDuration = 500
					fadeInTransitionAnimation = DefaultAnimateFadeIn
					fadeInDelay = 0
					fadeInExitDelay = 0
					fadeOutExitDelay = 0
					fadeOut = false
					fadeOutExtraScreen = false
					fadeOutDuration = 500
					fadeOutTransitionAnimation = DefaultAnimateFadeOut
					fadeOutDelay = 0
					fadeLyrInterpolation = 2
					fadeMuteEmulator = true
					fadeUseBackgrounds = true
					fadeClickThrough = false
					fadeSounds = true
					fade7zProgressMode = extraction
					fadeWidthBaseRes = 1920
					fadeHeightBaseRes = 1080
					fadeLyr1Color = FF000000
					fadeLyr1AlignImage = Stretch and Lose Aspect
					fadeLyr2Pos = Stretch and Lose Aspect
					fadeLyr2X = 0
					fadeLyr2Y = 0
					fadeLyr2W = 
					fadeLyr2H = 
					fadeLyr2Adjust = 1
					fadeLyr2PicPad = 0
					fadeLyr2Prefix = Extra Layer 1 - Console
					fadeLyr3Pos = Center
					fadeLyr3X = 450
					fadeLyr3Y = 450
					fadeLyr3W = 
					fadeLyr3H = 
					fadeLyr3Adjust = 1
					fadeLyr3PicPad = 0
					fadeLyr3Speed = 750
					fadeLyr3Animation = DefaultFadeAnimation
					fadeLyr37zAnimation = DefaultFadeAnimation
					fadeLyr3Type = imageandbar
					fadeLyr3ImgFollow7zProgress = true
					fadeLyr3Repeat = 1
					fadeLyr3BackImageTransparency = 30
					fadeLyr3StaticPos = No Alignment
					fadeLyr3StaticX = 0
					fadeLyr3StaticY = 870|1575
					fadeLyr3StaticW = 
					fadeLyr3StaticH = 
					fadeLyr3StaticAdjust = 1
					fadeLyr3StaticPicPad = 0
					fadeLyr3StaticPrefix = Info Bar
					fadeLyr4Adjust = 1
					fadeLyr4X = 1792|952
					fadeLyr4Y = 891|1596
					fadeLyr4W = 128
					fadeLyr4H = 
					fadeLyr4Pos = No Alignment
					fadeLyr4FPS = 50
					fadeLyr4PicPad = 0
					fadeTranspGifColor = FFFFFF
					fadeBarWindow = Image
					fadeBarWindowX = 
					fadeBarWindowY = 
					fadeBarWindowW = 900
					fadeBarWindowH = 
					fadeBarWindowR = 30
					fadeBarWindowM = 30
					fadeBarWindowHatchStyle = 8
					fadeBar = false
					fadeProgressDuration = 0
					fadeBarBack = true
					fadeBarBackColor = FF555555
					fadeBarH = 30
					fadeBarR = 10
					fadeBarColor = DD00BFFF
					fadeBarHatchStyle = 8
					fadeBarPercentageText = false
					fadeBarInfoText = true
					fadeBarXOffset = 0
					fadeBarYOffset = 150
					fadeRomInfoDescription = filtered text
					fadeRomInfoSystemName = image
					fadeRomInfoYear = text with label
					fadeRomInfoDeveloper = disabled
					fadeRomInfoPublisher = disabled
					fadeRomInfoGenre = disabled
					fadeRomInfoRating = image
					fadeRomInfoOrder = Description|SystemName|Year|Developer|Genre|Rating|Publisher
					fadeRomInfoTextPlacement = User Defined
					fadeRomInfoTextMargin = 7
					fadeRomInfoText1Options = w1600|787 h90 x165 y870|1575 cFFE1E1E1 r4 s90 Left Regular
					fadeRomInfoText2Options = w400 x8 y15 cFF555555 r4 s60 Bold
					fadeRomInfoText3Options = w310 x165 y960|1665 cFFE1E1E1 r4 s66 Left Regular
					fadeRomInfoText4Options = w1305|492 h66 x460 y960|1665 cFFE1E1E1 r4 s66 Left Regular
					fadeRomInfoText5Options = cFF555555 r4 s42 Bold
					fadeRomInfoText6Options = h135 x15 y885|1590 cFFCFCFCA r4 s120 Regular
					fadeRomInfoText7Options = h135 x15 y885|1590 cFFCFCFCA r4 s120 Regular
					fadeStats_Number_of_Times_Played = text with label
					fadeStats_Last_Time_Played = text with label
					fadeStats_Average_Time_Played = text with label
					fadeStats_Total_Time_Played = text with label
					fadeStats_System_Total_Played_Time = text with label
					fadeStats_Total_Global_Played_Time = text with label
					fadeStatsInfoOrder = Number_of_Times_Played|Last_Time_Played|Average_Time_Played|Total_Time_Played|System_Total_Played_Time|Total_Global_Played_Time
					fadeStatsInfoTextPlacement = topRight
					fadeStatsInfoTextMargin = 7
					fadeStatsInfoText1Options = cFFB4B4B4 r4 s22 Bold
					fadeStatsInfoText2Options = cFFB4B4B4 r4 s22 Bold
					fadeStatsInfoText3Options = cFFB4B4B4 r4 s22 Bold
					fadeStatsInfoText4Options = cFFB4B4B4 r4 s22 Bold
					fadeStatsInfoText5Options = cFFB4B4B4 r4 s22 Bold
					fadeStatsInfoText6Options = cFFB4B4B4 r4 s22 Bold
					fadeText1X = 0
					fadeText1Y = 0
					fadeText1Options = cFFB4B4B4 r4 s30 Right Bold
					fadeText1 = Loading Game
					fadeText2X = 0
					fadeText2Y = 0
					fadeText2Options = cFFB4B4B4 r4 s30 Right Bold
					fadeText2 = Extraction Complete, Ready
					fadeText3 = Loading Game
					fadeText4 = Loading Complete
					fadeFont = Bebas Neue
					fadeSystemAndRomLayersOnly = false
					fadeExtractionTime = disabled
					fadeExtractionTimeTextX = 0
					fadeExtractionTimeTextY = 0
					fadeExtractionTimeTextOptions = cFF555555 r4 s20 Bold
					fadeInterruptKey = 
					detectFadeErrorEnabled = true
					fadeImgPath = D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher\Media\Fade
					RLDataPath = D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher\Data
					RLMediaPath = D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher\Media
					RLErrSoundPath = D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher\Media\Sounds\Error
					modulesPath = D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher\Modules
					moduleFullName = D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher\Modules\RetroArch\RetroArch.ahk
					moduleName = RetroArch
					modulePath = D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher\Modules\RetroArch
					moduleExtension = ahk
					moduleExtensionsPath = D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher\Module Extensions
					libPath = D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher\Lib
					sevenZEnabled = false
					sevenZPath = D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Herramientas\7-Zip\7z.exe
					sevenZDllPath = D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Herramientas\7-Zip\7z.dll
					sevenZExtractPath = 
					sevenZExtractPathOrig = 
					sevenZAttachSystemName = false
					sevenZDelTemp = true
					sevenZFormats = .zip|.rar|.7z|.lzh|.gzip|.tar
					sevenZFormatsNoP = zip|rar|7z|lzh|gzip|tar
					sevenZFormatsRegEx = \.zip|\.rar|\.7z|\.lzh|\.gzip|\.tar
					7zExtractPath = 
					mgEnabled = false
					mgKey = ~NumpadSub
					mgBackgroundColor = FF000000
					mgSidePadding = 0.2
					mgWidthBaseRes = 1920
					mgHeightBaseRes = 1080
					mgYOffset = 500|800
					mgFont = Arial
					mgText1Options = x10p y250|500 w80p Center cBBFFFFFF r4 s100 BoldItalic
					mgText1Text = Please select a game
					mgText2Options = w96p cFFFFFFFF r4 s50 Center BoldItalic
					mgText2Offset = 100
					mgUseSound = true
					mgSoundfreq = 300
					mgExitEffect = none
					mgSelectedEffect = rotate
					mgUseGameArt = false
					mgCandidate = 
					mgValidTypes = \(Disc|\(Disk|\(Cart|\(Tape|\(Cassette|\(Part|\(Side
					mgOnLaunch = false
					pauseEnabled = false
					pauseKey = ~NumpadAdd
					pauseBackToMenuBarKey = X
					pauseZoomInKey = C
					pauseZoomOutKey = V
					pauseScreenshotKey = ~PrintScreen
					pauseHiToTextPath = D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher\Module Extensions\HiToText.exe
					pauseSaveStateKeyCodes = {Shift down}{1 down}{1 up}{Shift up}{F3 down}{F3 up}|{Shift down}{2 down}{2 up}{Shift up}{F3 down}{F3 up}|{Shift down}{3 down}{3 up}{Shift up}{F3 down}{F3 up}|{Shift down}{4 down}{4 up}{Shift up}{F3 down}{F3 up}|{Shift down}{5 down}{5 up}{Shift up}{F3 down}{F3 up}|{Shift down}{6 down}{6 up}{Shift up}{F3 down}{F3 up}|{Shift down}{7 down}{7 up}{Shift up}{F3 down}{F3 up}|{Shift down}{8 down}{8 up}{Shift up}{F3 down}{F3 up}|{Shift down}{9 down}{9 up}{Shift up}{F3 down}{F3 up}|{Shift down}{10 down}{10 up}{Shift up}{F3 down}{F3 up}
					pauseLoadStateKeyCodes = {Shift down}{1 down}{1 up}{Shift up}{F4 down}{F4 up}|{Shift down}{2 down}{2 up}{Shift up}{F4 down}{F4 up}|{Shift down}{3 down}{3 up}{Shift up}{F4 down}{F4 up}|{Shift down}{4 down}{4 up}{Shift up}{F4 down}{F4 up}|{Shift down}{5 down}{5 up}{Shift up}{F4 down}{F4 up}|{Shift down}{6 down}{6 up}{Shift up}{F4 down}{F4 up}|{Shift down}{7 down}{7 up}{Shift up}{F4 down}{F4 up}|{Shift down}{8 down}{8 up}{Shift up}{F4 down}{F4 up}|{Shift down}{9 down}{9 up}{Shift up}{F4 down}{F4 up}|{Shift down}{10 down}{10 up}{Shift up}{F4 down}{F4 up}
					keyboardEncoder = 
					keyboardEncoderEnabled = false
					keymapperEnabled = false
					keymapperAHKMethod = false
					keymapper = xpadder
					xpadderFullPath = D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\Utilities\Xpadder\xpadder.exe
					joyToKeyFullPath = D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\Utilities\JoyToKey\JoyToKey.exe
					profilePath = D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher\Profiles
					keymapperProfilePath = D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher\Profiles\xpadder
					keymapperFrontEndProfileName = RocketLauncherUI
					keymapperFrontEndProfile = false
					keymapperRocketLauncherProfileEnabled = false
					joyIDsEnabled = false
					joyIDsPreferredControllersGlobal = 
					joyIDsPreferredControllersSystem = use_global
					joyIDsPreferredControllersOnExit = 
					CustomJoyNamesEnabled = false
					CustomJoyNames = 
					rotateMethod = false
					FEProfile = D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher\Profiles\xpadder\RocketLauncherUI
					defaultProfile = D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher\Profiles\xpadder\_Default
					systemProfile = D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher\Profiles\xpadder\Nintendo Entertainment System
					xPadderSystemProfile = D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher\Profiles\xpadder\Nintendo Entertainment System\_Default
					emuProfile = D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher\Profiles\xpadder\Nintendo Entertainment System\RetroArch
					romProfile = D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher\Profiles\xpadder\Nintendo Entertainment System\8 Eyes (USA)
					RocketLauncherProfile = D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher\Profiles\xpadder\RocketLauncher
					blankProfile = D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher\Profiles\xpadder\_Default\blank
					ahkFEProfile = D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher\Profiles\AHK\RocketLauncherUI
					ahkDefaultProfile = D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher\Profiles\AHK\_Default
					ahkSystemProfile = D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher\Profiles\AHK\Nintendo Entertainment System
					ahkEmuProfile = D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher\Profiles\AHK\Nintendo Entertainment System\RetroArch
					ahkRomProfile = D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher\Profiles\AHK\Nintendo Entertainment System\8 Eyes (USA)
					ahkRocketLauncherProfile = D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher\Profiles\AHK\RocketLauncher
					bezelEnabled = true
					bezelICEnabled = false
					shaderName = false
					shaderColor = 
					shaderTransparency = 
					statisticsEnabled = true
					pressDuration = -1
					emuVolume = 1
					dxwndIni = D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher\Module Extensions\dxwnd\dxwnd.ini
					dxwndFullPath = D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher\Module Extensions\dxwnd\dxwnd.exe
					qResFullPath = D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher\Module Extensions\QRes.exe
					mon1O = 
					pacDrivedllFile = D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher\Module Extensions\PacDrive32.dll
					userFadeAnimIniFile = D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher\Lib\User Fade Animations.ini
					testFile = 
					testDuration = 
					initialErrorMode = 0

20:58:32:096 | RL |      INFO  | +0     | BuildScript - Loaded XHotkey Init.ahk scripts
20:58:32:096 | RL |      INFO  | +0     | BuildScript - Loaded Fade Init.ahk scripts
20:58:32:096 | RL |      INFO  | +0     | BuildScript - Loaded Statistics Init.ahk scripts
20:58:32:096 | RL |   WARNING  | +0     | BuildScript - "D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher\Lib\User Functions Init.ahk" not found
20:58:32:096 | RL |      INFO  | +0     | BuildScript - Validating module
20:58:32:105 | RL |      INFO  | +15    | BuildScript - Validation complete
20:58:32:106 | RL |      INFO  | +0     | BuildScript - Module:
					MEmu := "RetroArch"
					MEmuV := "v1.3.6"
					MURL := ["http://themaister.net/retroarch.html"]
					MAuthor := ["djvj","zerojay","SweatyPickle"]
					MVersion := "2.4.3"
					MCRC := "699AB8F7"
					iCRC := "FB2DB971"
					MID := "635038268922229162"
					MSystem := ["Acorn BBC Micro","AAE","Amstrad CPC","Amstrad GX4000","APF Imagination Machine","Applied Technology MicroBee","Apple IIGS","Arcade Classics","Atari 2600","Atari 5200","Atari 7800","Atari 8-Bit","Atari Classics","Atari Jaguar","Atari Lynx","Atari ST","Atari XEGS","Bally Astrocade","Bandai Gundam RX-78","Bandai Super Vision 8000","Bandai Wonderswan","Bandai Wonderswan Color","Canon X07","Capcom Classics","Capcom Play System","Capcom Play System II","Capcom Play System III","Casio PV-1000","Casio PV-2000","Cave","Coleco ADAM","ColecoVision","Commodore MAX Machine","Commodore Amiga","Commodore 64","Creatronic Mega Duck","Data East Classics","Dragon Data Dragon","Emerson Arcadia 2001","Entex Adventure Vision","Elektronika BK","Epoch Game Pocket Computer","Epoch Super Cassette Vision","Exidy Sorcerer","Fairchild Channel F","Final Burn Alpha","Funtech Super Acan","GamePark 32","GCE Vectrex","Hartung Game Master","Interton VC 4000","Irem Classics","JungleTac Sport Vii","Konami Classics","MAME","Magnavox Odyssey 2","Microsoft MSX","Microsoft MSX2","Matra & Hachette Alice","Mattel Aquarius","Mattel Intellivision","Midway Classics","Namco Classics","Namco System 22","NEC PC Engine","NEC PC Engine-CD","NEC PC-FX","NEC TurboGrafx-16","NEC SuperGrafx","NEC TurboGrafx-CD","Nintendo 64","Nintendo 64DD","Nintendo Arcade Systems","Nintendo Classics","Nintendo DS","Nintendo Entertainment System","Nintendo Famicom","Nintendo Famicom Disk System","Nintendo Game Boy","Nintendo Game Boy Color","Nintendo Game Boy Japan","Nintendo Game Boy Advance","Nintendo Game & Watch","Nintendo Super Game Boy","Nintendo Pokemon Mini","Nintendo Virtual Boy","Nintendo Super Famicom","Nintendo Satellaview","Nintendo SuFami Turbo","Nintendo Gamecube","Panasonic 3DO","Elektronska Industrija Pecom 64","Philips CD-i","Philips Videopac","RCA Studio II","ScummVM","Sega 32X","Sega Classics","Sega Mega Drive 32X","Sega Mark III","Sega SC-3000","Sega SG-1000","Sega CD","Sega Dreamcast","Sega Game Gear","Sega Genesis","Sega Master System","Sega Mega Drive","Sega Meganet","Sega Nomad","Sega Pico","Sega Saturn","Sega Saturn Japan","Sega VMU","Sega ST-V","Sharp X1","Sharp X68000","Sinclair ZX Spectrum","Sinclair ZX81","Sony PlayStation","Sony PlayStation Minis","Sony PocketStation","Sony PSP","Sony PSP Minis","Sord M5","SNK Classics","SNK Neo Geo","SNK Neo Geo AES","SNK Neo Geo MVS","SNK Neo Geo Pocket","SNK Neo Geo CD","SNK Neo Geo Pocket Color","Spectravideo","Super Nintendo Entertainment System","Taito Classics","Tandy TRS-80 Color Computer","Technos","Texas Instruments TI 99-4A","Thomson MO5","Thomson TO7","Tiger Game.com","Tiki-100","Tomy Tutor","VTech CreatiVision","Watara Supervision","Williams Classics"]
					;----------------------------------------------------------------------------
					; Notes:
					; If the emu doesn't load and you get no error, usually this means the LibRetro DLL is not working!
					; Devs stated they will never add support for mounted images (like via DT)
					; Fullscreen is controlled via the module setting in RocketLauncherUI
					; This module uses the CLI version of RetroArch (retroarch.exe), not the GUI (retroarch-phoenix.exe).
					; The emu may make a mouse cursor appear momentarily during launch, MouseMove and hide_cursor seem to have no effect
					; Enable 7z support for archived roms
					; Available CLI options: https://github.com/PyroFilmsFX/iOS/blob/master/docs/retroarch.1
					;
					; LibRetro DLLs:
					; LibRetro DLLs come with the emu, but here is another source for them: http://forum.themaister.net/
					; Whatever cores you decide to use, make sure they are extracted anywhere in your Emu_Path\cores folder. The module will find and load the default core unless you choose a custom one for each system.
					; You can find supported cores that Retroarch supports simply by downloading them from the "retroarch-phoenix.exe" or by visiting here: https://github.com/libretro/libretro.github.com/wiki/Supported-cores
					; Some good discussion on cores and filters: http://forum.themaister.net/viewtopic.php?id=270
					;
					; SRM files:
					; The srm files location is determined by the configuration file used (savefile_directory = ":\whatever") The default RetroArch srm directory is ":\saves" You can select to sort into core folders (ie: :/saves/Mednafen PSX) by changing sort_savefiles_enable = "true" in the configuration file.
					;
					; Save states:
					; The save state files location is determined by the configuration file used (savestate_directory = ":\whatever") The default RetroArch savestate directory is ":\states" You can select to sort into core folders (ie: :/states/Mednafen PSX) by changing sort_savestates_enable = "true" in the configuration file.
					;
					; Config files:
					; By default, the module looks for config files in a folder called config in the RetroArch folder. Example: C:\emus\RetroArch\config. You can change this folder to anything you like by changing the module's ConfigFolder setting in RocketLauncherUI.  This will be the config folder for the module and will NOT change the location of RetroArch's own /config directory.
					; RetroArch's global config file is called "retroarch.cfg". RetroArch will use a system cfg file named to match your System Name (example: Nintendo Entertainment System.cfg).
					; RetroArch will also load core config files named after the core name. Example: nestopia_libretro.cfg
					; This allows different settings globally, for each system, and for each core. If you want all systems to use the same retroarch.cfg, do not have any system or core cfg files, only have the retroarch.cfg.
					; If a core config exists, it takes precedence over the global config. And if a system config exists, it takes precedence over the core config.
					;
					; Core Options:
					; By default, RetroArch creates a retroarch-core-options.cfg in it's root directory.  Example: C:\emus\RetroArch\retroarch-core-options.cfg.  This will always be used if the default RetroArch.cfg is loaded.  If a configuration file from any other location is used, RetroArch will create a retroarch-core-options.cfg file in the root of that directory.  The module has an option to have RetroArch use only the default retroarch-core-options.cfg file no matter the path of the config directory or location of the configuiration file being used.  To enable this option set Single_Core_Options to true.
					
					; MultiGame:
					; MultiGame support is currently only available for the Mednafen PSX core. Retroarch uses the same method as Mednafen to load multi-disc games. This method involves m3u playlists which are commonly used for music. The m3u files needed to load multi-disc games are generated for you by the module when you launch a multi-disc game and are saved to your corresponding rom directory. Due to m3u limitations, your multi-disc roms/images cannot be archived -- they must be unzipped. All single disc games can remain archived and you can still enable 7z under system settings. If you do not wish to use MultiGame support you can archive your roms/images and m3u generation will be skipped on launch. 
					; The m3u files generated by the module contain a list of paths to all roms/images in the multi-disc set. Retroarch automatically loads the first path in the m3u so the first path will always be the disc you are loading. For example, Final Fantasy VII has 3 discs and if you load Disc 2 first, the order of the paths in the m3u will be disc 2, disc 3, disc 1. If you load Disc 3 first, the order will be disc 3, disc 1, disc 2. The module anticipates this and will load the correct disk, selected from the Pause/MultiDisk menus. However if you choose to manually use Retroarch's UI or disk swap keys to change discs, you will need to keep this in mind.
					; In order for RocketLauncher's MultiGame UI to swap discs, you must define Eject_Toggle_Key, Next_Disk_Key, and Previous_Disk_Key under global settings for the emulator in RocketLauncher. Because AHK and Retroarch use different naming conventions for some keyboard keys, it is best to use a letter, a number, or F1-F12.
					;
					; MAME:
					; MAME BIOS roms should be placed in Rom Path's directory. Some systems require the BIOS roms be placed in the MAME internal name directory. (Example: :\Rom Folder\a5200). The MAME BIOS_Roms_Folder option will have no effect unless you are using an older version of the mess core. 
					;
					; System Specific Notes:
					; Microsoft MSX/MSX2: Launch an MSX game and in the core options, set the console to be an MSX2 and it will play both just fine.
					; Nintendo Famicom Disk System - Requires disksys.rom be placed in the folder you define as system_directory in the RetroArch's cfg.
					; Sega CD - Requires "bios_CD_E.bin", "bios_CD_J.bin", "bios_CD_U.bin" all be placed in the folder you define as system_directory in the RetroArch's cfg.
					; Super Nintendo Entertainment System - requires split all 10 dsp# & st### roms all be placed in the folder you define as system_directory in the RetroArch's cfg. Many games, like Super Mario Kart require these.
					; NEC TurboGrafx-CD (using pce fast core) - Requires "syscard3.pce" be placed in the folder you define as system_directory in the RetroArch's cfg.
					; NEC TurboGrafx-CD (using MAME core)
					;   - You'll need to update a couple mame specific options in the Retroarch core options file to get it to boot from the cli. These should probably be updated automagically by the module. Turning softlists off, but might not need to.
					;       mame_boot_from_cli = "enabled"
					;       mame_softlists_enable = "disabled"
					;       mame_softlists_auto_media = "disabled"
					;	- Requires hash folder from MAME/MESS/UME, either from the source or release package. Save this in the system_directory you've defined for RetroArch. Something like \RetroArch\system\mame\hash\
					;	- Requires the CD bios file(s) saved in the mame bios folder you've defined. Usually \RetroArch\system\mame\bios\
					;		For PC Engine-CD you'll need the file "[cd] cd-rom system (japan) (v2.1).pce" zipped as cdsys.zip and saved in a pce subfolder in your bios path, so \RetroArch\system\mame\bios\pce\cdsys.zip
					;		For PC Engine SuperGrafx-CD you'll need the file "[cd] super cd-rom system (japan) (v3.0).pce" zipped as scdsys.zip and saved in a pce subfolder in your bios path, so \RetroArch\system\mame\bios\pce\scdsys.zip
					;		For TurboGrafx-CD you'll need the file "[cd] turbografx cd system card (usa) (v2.0).pce" zipped as cdsys.zip and saved in a tg16 subfolder in your bios path, so \RetroArch\system\mame\bios\tg16\cdsys.zip
					;		For TurboDuo you'll need the file "[cd] turbografx cd super system card (usa) (v3.0).pce" zipped as scdsys.zip and saved in a tg16 subfolder in your bios path, so \RetroArch\system\mame\bios\tg16\scdsys.zip
					; Nintendo Super Game Boy - Set the Module setting in RocketLauncherUI SuperGameBoy to true to enable a system or only a rom to use SGB mode. This is not needed if your systemName is set to the official name of "Nintendo Super Game Boy". Requires "sgb.boot.rom" and "Super Game Boy (World).sfc" to be placed in the folder you define as system_directory in the RetroArch's cfg. This is needed if you want to use Super game boy mode and color palettes. Also requires using the latest bsnes core. Not all games support SGB mode.
					; Sony PSP/PlayStation Minis: To avoid the dialog box complaining about ppge_atlas.zim, download it from https://github.com/libretro/libretro-ppsspp/blob/master/assets/ppge_atlas.zim and place it in your Retroarch/system/PPSSPP/ directory.
					;----------------------------------------------------------------------------
					StartModule()
					BezelGUI()
					FadeInStart()
					
					primaryExe := new Emulator(emuPath . "\" . executable)	; instantiate emulator executable object
					emuPrimaryWindow := new Window(new WindowTitle("RetroArch","RetroArch"))	; instantiate primary emulator window object
					emuConsoleWindow := new Window(new WindowTitle("","ConsoleWindowClass"))	; instantiate emulator console window object
					
					; Here we define all supported systems for this module. This object controls how the module reacts to different systems. RetroArch can play a lot of systems, but needs to know what system you want to run, so this module has to adapt.
					; 1 - Official System Name in RocketLauncher
					; 2 - Short name used only for easy referencing within module
					; 3 - Default core
					; 4 - The system ID MAME core recognizes
					RLLog.Debug("Module - Started building the " . MEmu . " object")
					mTypeVar:="
						( LTrim
						AAE|LibRetro_AAE|mame_libretro
						Acorn BBC Micro|LibRetro_BBCB|mame_libretro|bbcb
						Amstrad CPC|LibRetro_CPC|mame_libretro|cpc464
						Amstrad GX4000|LibRetro_GX4K|mame_libretro|gx4000
						APF Imagination Machine|LibRetro_APF|mame_libretro|apfimag
						Apple IIGS|LibRetro_AIIGS|mame_libretro|apple2gs
						Applied Technology MicroBee|LibRetro_MBEE|mame_libretro|mbeeic
						Arcade Classics|LibRetro_ARCADE|mame_libretro
						Atari 2600|LibRetro_2600|stella_libretro|a2600
						Atari 5200|LibRetro_5200|mame_libretro|a5200
						Atari 7800|LibRetro_7800|prosystem_libretro|a7800
						Atari 8-Bit|LibRetro_ATARI8|mame_libretro|a800
						Atari Classics|LibRetro_ACLS|mame_libretro
						Atari Jaguar|LibRetro_JAG|virtualjaguar_libretro|jaguar
						Atari Lynx|LibRetro_LYNX|handy_libretro|lynx
						Atari ST|LibRetro_ST|hatari_libretro
						Atari XEGS|LibRetro_XEGS|mame_libretro|xegs
						Bally Astrocade|LibRetro_BAST|mame_libretro|astrocde
						Bandai Gundam RX-78|LibRetro_BGRX|mame_libretro|rx78
						Bandai Super Vision 8000|LibRetro_SV8K|mame_libretro|sv8000
						Bandai Wonderswan|LibRetro_WSAN|mednafen_wswan_libretro|wswan
						Bandai Wonderswan Color|LibRetro_WSANC|mednafen_wswan_libretro|wscolor
						Canon X07|LibRetro_CX07|mame_libretro|x07
						Capcom Classics|LibRetro_CAPC|fbalpha2012_libretro
						Capcom Play System|LibRetro_CPS1|fbalpha2012_libretro
						Capcom Play System II|LibRetro_CPS2|fbalpha2012_libretro
						Capcom Play System III|LibRetro_CPS3|fbalpha2012_libretro
						Casio PV-1000|LibRetro_CAS1K|mame_libretro|pv1000
						Casio PV-2000|LibRetro_CAS2K|mame_libretro|pv2000
						Cave|LibRetro_CAVE|mame_libretro
						Coleco ADAM|LibRetro_ADAM|mame_libretro|adam
						ColecoVision|LibRetro_COLEC|mame_libretro|coleco
						Commodore Amiga|LibRetro_PUAE|puae_libretro
						Commodore Max Machine|LibRetro_CMAX|mame_libretro|vic10
						Commodore 64|vice_x64_libretro|vice_x64_libretro
						Creatronic Mega Duck|LibRetro_DUCK|mame_libretro|megaduck
						Data East Classics|LibRetro_DATA|mame_libretro
						Dragon Data Dragon|LibRetro_DRAG64|mame_libretro|dragon64
						Elektronika BK|LibRetro_EBK|mame_libretro|bk0010
						Elektronska Industrija Pecom 64|LibRetro_P64|mame_libretro|pecom64
						Emerson Arcadia 2001|LibRetro_A2001|mame_libretro|arcadia
						Entex Adventure Vision|LibRetro_AVISION|mame_libretro|advision
						Epoch Game Pocket Computer|LibRetro_GPCKET|mame_libretro|gamepock
						Epoch Super Cassette Vision|LibRetro_SCV|mame_libretro|scv
						Exidy Sorcerer|LibRetro_SORCR|mame_libretro|sorcerer
						Fairchild Channel F|LibRetro_CHANF|mame_libretro|channelf
						Final Burn Alpha|LibRetro_FBA|fbalpha_libretro
						Funtech Super Acan|LibRetro_SACAN|mame_libretro|supracan
						GamePark 32|LibRetro_GP32|mame_libretro|gp32
						GCE Vectrex|LibRetro_VECTX|mame_libretro|vectrex
						Hartung Game Master|LibRetro_GMASTR|mame_libretro|gmaster
						Interton VC 4000|LibRetro_VC4K|mame_libretro|vc4000
						Irem Classics|LibRetro_IREM|mame_libretro
						JungleTac Sport Vii|LibRetro_SPORTV|mame_libretro|vii
						Konami Classics|LibRetro_KONC|mame_libretro
						Magnavox Odyssey 2|LibRetro_ODYS2|mame_libretro|odyssey2
						MAME|LibRetro_MAME|mame_libretro|mame
						Matra & Hachette Alice|LibRetro_ALICE|mame_libretro|alice32
						Mattel Aquarius|LibRetro_AQUA|mame_libretro|aquarius
						Mattel Intellivision|LibRetro_INTV|mame_libretro|intv
						MGT Sam Coupe|LibRetro_SAMCP|mame_libretro|
						Microsoft MS-DOS|LibRetro_MSDOS|dosbox_libretro
						Microsoft MSX|LibRetro_MSX|bluemsx_libretro
						Microsoft MSX2|LibRetro_MSX2|bluemsx_libretro
						Microsoft Windows 3.x|LibRetro_WIN3X|dosbox_libretro
						Midway Classics|LibRetro_MIDC|mame_libretro
						Namco Classics|LibRetro_NAMC|mame_libretro
						Namco System 22|LibRetro_NAM2|mame_libretro
						NEC PC Engine|LibRetro_PCE|mednafen_pce_fast_libretro|pce,cart
						NEC PC Engine-CD|LibRetro_PCECD|mednafen_pce_fast_libretro|pce,cdrom
						NEC PC-FX|LibRetro_PCFX|mednafen_pcfx_libretro
						NEC SuperGrafx|LibRetro_SGFX|mednafen_supergrafx_libretro|sgx,cart
						NEC TurboGrafx-16|LibRetro_TG16|mednafen_pce_fast_libretro|tg16,cart
						NEC TurboGrafx-CD|LibRetro_TGCD|mednafen_pce_fast_libretro|tg16,cdrom
						Nintendo 64|LibRetro_N64|mupen64plus_libretro|n64
						Nintendo 64DD|LibRetro_N64|mupen64plus_libretro
						Nintendo Arcade Systems|LibRetro_NINARC|mame_libretro
						Nintendo Classics|LibRetro_NINC|mame_libretro
						Nintendo DS|LibRetro_DS|desmume_libretro
						Nintendo Entertainment System|LibRetro_NES|nestopia_libretro|nes
						Nintendo Famicom|LibRetro_NFAM|nestopia_libretro
						Nintendo Famicom Disk System|LibRetro_NFDS|nestopia_libretro|famicom
						Nintendo Game Boy|LibRetro_GB|gambatte_libretro|gameboy
						Nintendo Game Boy Advance|LibRetro_GBA|vba_next_libretro|gba
						Nintendo Game Boy Color|LibRetro_GBC|gambatte_libretro|gbcolor
						Nintendo Game Boy Japan|LibRetro_GBJ|gambatte_libretro|gameboy
						Nintendo Game & Watch|LibRetro_GW|gw_libretro
						Nintendo Pokemon Mini|LibRetro_POKE|mame_libretro|pokemini
						Nintendo Satellaview|LibRetro_NSFS|snes9x_libretro
						Nintendo SuFami Turbo|LibRetro_NSFST|snes9x_libretro
						Nintendo Super Famicom|LibRetro_NSF|bsnes_balanced_libretro
						Nintendo Super Game Boy|LibRetro_SGB|bsnes_balanced_libretro
						Nintendo Virtual Boy|LibRetro_NVB|mednafen_vb_libretro|vboy
						Nintendo Gamecube|LibRetro_GC|dolphin_libretro|gc
						Othello Multivision|LibRetro_OTHO|genesis_plus_gx_libretro
						Panasonic 3DO|LibRetro_3DO|4do_libretro
						Philips CD-i|LibRetro_CDI|mame_libretro|cdimono1
						Philips Videopac|LibRetro_PVID|mame_libretro|videopac
						RCA Studio II|LibRetro_STUD2|mame_libretro|studio2
						SCUMMVM|LibRetro_SCUMM|scummvm_libretro
						Sega 32X|LibRetro_32X|picodrive_libretro|32x
						Sega CD|LibRetro_SCD|genesis_plus_gx_libretro|segacd
						Sega Classics|LibRetro_SEGC|mame_libretro
						Sega Dreamcast|LibRetro_DCAST|reicast_libretro
						Sega Game Gear|LibRetro_GG|genesis_plus_gx_libretro|gamegear
						Sega Genesis|LibRetro_GEN|genesis_plus_gx_libretro|genesis
						Sega Mark III|Libretro_SM3|genesis_plus_gx_libretro
						Sega Master System|LibRetro_SMS|genesis_plus_gx_libretro|sms
						Sega Mega Drive|LibRetro_GEN|genesis_plus_gx_libretro|megadriv
						Sega Mega Drive 32X|LibRetro_MD32X|picodrive_libretro
						Sega Meganet|LibRetro_GEN|genesis_plus_gx_libretro|genesis
						Sega Nomad|LibRetro_GEN|genesis_plus_gx_libretro|genesis
						Sega Pico|LibRetro_PICO|picodrive_libretro
						Sega Saturn|LibRetro_SAT|yabause_libretro|saturn
						Sega Saturn Japan|LibRetro_SAT|yabause_libretro|saturnjp
						Sega SC-3000|LibRetro_SC3K|mame_libretro|sc3000
						Sega SG-1000|LibRetro_SG1K|genesis_plus_gx_libretro
						Sega ST-V|LibRetro_STV|mame_libretro
						Sega VMU|LibRetro_SVMU|mame_libretro|svmu
						Sharp X1|LibRetro_SX1|mame_libretro|x1
						Sharp X68000|LibRetro_SX68000|mame_libretro|x68000
						Sinclair ZX Spectrum|LibRetro_SPECZX|fuse_libretro|spectrum
						Sinclair ZX81|LibRetro_ZX81|81_libretro|zx81
						SNK Classics|LibRetro_SNKC|mame_libretro
						SNK Neo Geo|LibRetro_NEO|fbalpha_libretro
						SNK Neo Geo AES|LibRetro_NEOAES|mame_libretro|aes
						SNK Neo Geo CD|LibRetro_NEOCD|mame_libretro|neocdz
						SNK Neo Geo MVS|LibRetro_NEOMVS|mame_libretro
						SNK Neo Geo Pocket|LibRetro_NGP|mednafen_ngp_libretro|ngp
						SNK Neo Geo Pocket Color|LibRetro_NGPC|mednafen_ngp_libretro|ngpc
						Sony PlayStation|LibRetro_PSX|mednafen_psx_hw_libretro|psu
						Sony PlayStation Minis|LibRetro_PSXMIN|ppsspp_libretro
						Sony PocketStation|LibRetro_POCKS|mame_libretro|pockstat
						Sony PSP|LibRetro_PSP|ppsspp_libretro
						Sony PSP Minis|LibRetro_PSP|ppsspp_libretro
						Sord M5|LibRetro_SORD|mame_libretro|m5
						Spectravideo|LibRetro_SV328|mame_libretro|svi328n
						Super Nintendo Entertainment System|LibRetro_SNES|snes9x_libretro
						Taito Classics|LibRetro_TAIC|mame_libretro
						Tandy TRS-80 Color Computer|LibRetro_TRS80|mame_libretro|coco3
						Technos|LibRetro_TECHN|mame_libretro
						Texas Instruments TI 99-4A|LibRetro_TI99|mame_libretro|ti99_4a
						Thomson MO5|LibRetro_MO5|mame_libretro|mo5
						Thomson TO7|LibRetro_TO7|mame_libretro|to7
						Tiger Game.com|LibRetro_TCOM|mame_libretro|gamecom
						Tiki-100|LibRetro_TIKI|mame_libretro|kontiki
						Tomy Tutor|LibRetro_TOMY|mame_libretro|tutor
						VTech CreatiVision|LibRetro_VTECH|mame_libretro|crvision
						Watara Supervision|LibRetro_SUPRV|mame_libretro|svision
						Williams Classics|LibRetro_WILLS|mame_libretro
						)"
					mType := Object()
					Loop, Parse, mTypeVar, `n, `r
					{
						obj := {}
						Loop, Parse, A_LoopField, |
						{
							If (A_Index = 1)
								obj.System := A_LoopField
							Else If (A_Index = 2)
								obj.ID := A_LoopField
							Else If (A_Index = 3)
								obj.Core := A_LoopField
							Else {	; 4
								StringSplit, tmp, A_LoopField, `,
								obj.MAMEID := tmp1
								obj.MAMEMedia := tmp2
							}
						}
						mType.Insert(obj["System"], obj)
					}
					RLLog.Debug("Module - Finished building the " . MEmu . " object")
					; For easier use throughout the module
					retroSystem := mType[systemName].System
					retroID := mType[systemName].ID
					retroCore := mType[systemName].Core
					retroMAMEID := mType[systemName].MAMEID
					retroMAMEMedia := mType[systemName].MAMEMedia
					RLLog.Info("Module - Using these system variables:")
					RLLog.Info("Module - retroSystem: " . retroSystem)
					RLLog.Info("Module - retroID: " . retroID)
					RLLog.Info("Module - retroCore: " . retroCore)
					RLLog.Info("Module - retroMAMEID: " . retroMAMEID)
					RLLog.Info("Module - retroMAMEMedia: " . retroMAMEMedia)
					If !retroSystem
						ScriptError("Your systemName is: " . systemName . "`nIt is not one of the known supported systems for this " . MEmu . " module: " . moduleName)
					If !retroCore
						ScriptError("Your Core ID is: " . retroID . "`nCould not find a default core to use. Please update the module with a default core.")
					
					Fullscreen := moduleIni.Read("Settings", "Fullscreen","true",,1)
					configFolder := moduleIni.Read("Settings", "ConfigFolder",emuPath . "\config",,1)
					singlecoreoptions := moduleIni.Read("Settings", "single_core_options","false",,1) = "true" ? ":\retroarch-core-options.cfg" : """"
					mameRomPath := moduleIni.Read("MAME", "BIOS_Roms_Folder",,,1)
					mameHideNag := If moduleIni.Read("MAME", "Hide_Nag_Screen","false",,1) = "true" ? "enabled" : "disabled"
					mameHideInfo := If moduleIni.Read("MAME", "Hide_Info_Screen","false",,1) = "true" ? "enabled" : "disabled"
					mameHideWarn := If moduleIni.Read("MAME", "Hide_Warning_Screen","false",,1) = "true" ? "enabled" : "disabled"
					hideConsole := moduleIni.Read("Settings", "HideConsole","true",,1)
					ejectToggleKey := moduleIni.Read("Settings", "Eject_Toggle_Key",,,1)
					nextDiskKey := moduleIni.Read("Settings", "Next_Disk_Key",,,1)
					prevDiskKey := moduleIni.Read("Settings", "Previous_Disk_Key",,,1)
					core := moduleIni.Read(romName . "|" . systemName, "LibRetro_Core",retroCore,,1)
					superGB := moduleIni.Read(romName . "|" . systemName, "SuperGameBoy","false",,1)
					enableNetworkPlay := moduleIni.Read(romName . "|Network", "Enable_Network_Play","false",,1)
					overlay := moduleIni.Read(romName . "|" . systemName, "Overlay",,,1)
					videoShader := moduleIni.Read(romName . "|" . systemName, "VideoShader",,,1)
					aspectRatioIndex := moduleIni.Read(romName . "|" . systemName, "AspectRatioIndex",,,1)
					customViewportWidth := moduleIni.Read(romName . "|" . systemName, "CustomViewportWidth",,,1)
					customViewportHeight := moduleIni.Read(romName . "|" . systemName, "CustomViewportHeight",,,1)
					customViewportX := moduleIni.Read(romName . "|" . systemName, "CustomViewportX",,,1)
					customViewportY := moduleIni.Read(romName . "|" . systemName, "CustomViewportY",,,1)
					stretchToFillBezel := moduleIni.Read(romName . "|" . systemName, "StretchToFillBezel","false",,1)
					rotation := moduleIni.Read(romName . "|" . systemName, "Rotation",0,,1)
					cropOverscan := moduleIni.Read(romName . "|" . systemName, "CropOverscan",,,1)
					threadedVideo := moduleIni.Read(romName . "|" . systemName, "ThreadedVideo",,,1)
					vSync := moduleIni.Read(romName . "|" . systemName, "VSync",,,1)
					integerScale := moduleIni.Read(romName . "|" . systemName, "IntegerScale",,,1)
					configurationPerCore := moduleIni.Read(romName . "|" . systemName, "ConfigurationPerCore","false",,1)
					
					If (StringUtils.Contains(core, "^(mame|mess|ume)") && !retroMAMEID) {
						retroMAMEID := "mame"	; set all systems that use a mame core to the default mame ID so any system name is supported
						RLLog.Warning("Module - Setting MAMEID to default ""mame"" for """ . retroSystem . """")
					}
					
					configFolder := RLObject.getFullPathFromRelative(rlPath,configFolder)
					mameRomPath := If mameRomPath ? RLObject.getFullPathFromRelative(rlPath,mameRomPath) : romPath
					overlay := RLObject.getFullPathFromRelative(rlPath,overlay)
					videoShader := RLObject.getFullPathFromRelative(rlPath,videoShader)
					rotateBezel := false
					
					configFolder := new Folder(configFolder)
					
					If (retroID = "LibRetro_SGB" || superGB = "true")	; if system or rom is set to use Super Game Boy
					{	superGB := "true"	; setting this just in case it's false and the system is Nintendo Super Game Boy
						sgbRomPath := CheckFile(emuPath . "\system\Super Game Boy (World).sfc","Could not find the rom required for Super Game Boy support. Make sure the rom ""Super Game Boy (World).sfc"" is located in: " . emuPath . "\system")
						CheckFile(emuPath . "\system\sgb.boot.rom","Could not find the bios required for Super Game Boy support. Make sure the bios ""sgb.boot.rom"" is located in: " . emuPath . "\system")
						retroID := "LibRetro_SGB"	; switching to Super Game Boy mode
						retroSystem := "Nintendo Super Game Boy"
					}
					
					; Find the dll for this system
					libDll := CheckFile(emuPath . "\cores\" . core . ".dll", "Your " . retroID . " dll is set to " . core . " but could not locate this file:`n" . emuPath . "\cores\" . core . ".dll")
					
					; Find the cfg file to use
					If !configFolder.Exist()
						ScriptError("You need to make sure ""ConfigFolder"" is pointing to your RetroArch config folder. By default it is looking here: """ . configFolder.FilePath . """")
					globalRetroCfg := emuPath . "\retroarch.cfg"
					systemRetroCfg := configFolder.FilePath . "\" . retroSystem . ".cfg"
					coreRetroCfg := configFolder.FilePath . "\" . core . ".cfg"
					RLLog.Info("Module - Global cfg should be: " . globalRetroCfg)
					RLLog.Info("Module - System cfg should be: " . systemRetroCfg)
					RLLog.Info("Module - Core cfg should be: " . coreRetroCfg)
					foundCfg := ""
					
					systemRetroCfg := new File(systemRetroCfg)
					coreRetroCfg := new File(coreRetroCfg)
					globalRetroCfg := new File(globalRetroCfg)
					
					If systemRetroCfg.Exist() {	; check for system cfg first
						retroCFGFile := systemRetroCfg
						foundCfg := 1
						RLLog.Info("Module - Found a System cfg!")
					} Else If coreRetroCfg.Exist() {	; 2nd option is a core config
						retroCFGFile := coreRetroCfg
						foundCfg := 1
						RLLog.Info("Module - Found a Core cfg!")
					} Else If globalRetroCfg.Exist() {	; 3rd is global cfg
						retroCFGFile := globalRetroCfg
						foundCfg := 1
						RLLog.Info("Module - Found a Global cfg!")
					}
					If foundCfg {
						RLLog.Info("Module - " . MEmu . " is using " . retroCFGFile.FileFullPath . " as its config file.")
						retroCFG := LoadProperties(retroCFGFile.FileFullPath)
					} Else
						RLLog.Warning("Module - Could not find a cfg file to update settings. RetroArch will make one for you.")
					
					If StringUtils.Contains(rotation,"1|3") ; use vertical bezel if RA rotation is set to 90 or 270 degrees
						rotateBezel := true
					
					If StringUtils.Contains(retroID, "LibRetro_NFDS|LibRetro_SCD|LibRetro_TGCD|LibRetro_PCECD|LibRetro_PCFX") {		; these systems require the retroarch settings to be read
						retroSysDir := ReadProperty(retroCFG,"system_directory")	; read value
						retroSysDir := ConvertRetroCFGKey(retroSysDir)	; remove dbl quotes
						retroSysDirLeft := StringUtils.Left(retroSysDir, 2)
						If (retroSysDirLeft = ":\") {	; if retroarch is set to use a default folder
							retroSysDir := StringUtils.TrimLeft(retroSysDir, 1)
							RLLog.Info("Module - RetroArch is using a relative system path: """ . retroSysDir . """")
							retroSysDir := emuPath . retroSysDir
						}
						If !retroSysDir
							ScriptError("RetroArch requires you to set your system_directory and place bios rom(s) in there for """ . retroSystem . """ to function. Please do this first by running ""retroarch-phoenix.exe"" manually.")
						checkForSlash := StringUtils.Right(retroSysDir, 1)
						If (checkForSlash = "\")	; check if a backslash is the last character. If it is, remove it, as this is non-standard method to define folders
							retroSysDir := StringUtils.TrimRight(retroSysDir, 1)
					}
					
					If (StringUtils.Contains(core, "^(mame|mess|ume)")) || (StringUtils.Contains(retroID, "LibRetro_N64|LibRetro_NES|LibRetro_LYNX|LibRetro_PSX")) || (StringUtils.Contains(retroID, "LibRetro_NES") && (StringUtils.Contains(core, "nestopia_libretro"))) {	; these systems will use an ini to store game specific settings
						RLLog.Info("Module - Reading / creating system ini for specific settings.")
						If !StringUtils.Contains(core, "^(mame|mess|ume)") {
							If !SystemModuleIni.Exist()
								SystemModuleIni.Append		; create a new blank ini file if one does not exist
						}
					
						coreOptionsCFG := LoadProperties(coreOptionsCFGFile.FileFullPath)
						
						If StringUtils.Contains(core, "^(mame|mess|ume)") {	; Set some MAME/MESS/UME core options.
							tmpCore := If StringUtils.Contains(core, "mame") ? "mame" : "mess"
							WriteProperty(coreOptionsCFG, tmpCore . "_read_config", """enabled""", 1)
							WriteProperty(coreOptionsCFG, tmpCore . "_boot_from_cli", """enabled""", 1)				; This needs to be enabled in order to run games with RLauncher
							WriteProperty(coreOptionsCFG, tmpCore . "_hide_nagscreen", "" . mameHideNag . "", 1)
							WriteProperty(coreOptionsCFG, tmpCore . "_hide_infoscreen", "" . mameHideInfo . "", 1)
							WriteProperty(coreOptionsCFG, tmpCore . "_hide_warnings", "" . mameHideWarn . "", 1)
						} Else If StringUtils.Contains(retroID, "LibRetro_N64") {	; Nintendo 64
							mupenGfx := moduleIni.Read(romName . "|" . systemName, "Mupen_Gfx_Plugin", "auto",,1)
							mupenRsp := moduleIni.Read(romName . "|" . systemName, "Mupen_RSP_Plugin", "auto",,1)
							mupenCpu := moduleIni.Read(romName . "|" . systemName, "Mupen_CPU_Core", "dynamic_recompiler",,1)
							mupenPak1 := moduleIni.Read(romName . "|" . systemName, "Mupen_Pak_1", "memory",,1)
							mupenPak2 := moduleIni.Read(romName . "|" . systemName, "Mupen_Pak_2", "memory",,1)
							mupenPak3 := moduleIni.Read(romName . "|" . systemName, "Mupen_Pak_3", "memory",,1)
							mupenPak4 := moduleIni.Read(romName . "|" . systemName, "Mupen_Pak_4", "memory",,1)
							mupenGfxAccur := moduleIni.Read(romName . "|" . systemName, "Mupen_Gfx_Accuracy", "high",,1)
							mupenExpMem := moduleIni.Read(romName . "|" . systemName, "Mupen_Disable_Exp_Memory", "no",,1)
							mupenTexturFilt := moduleIni.Read(romName . "|" . systemName, "Mupen_Texture_Filtering", "nearest",,1)
							mupenViRefresh := moduleIni.Read(romName . "|" . systemName, "Mupen_VI_Refresh", "2200",,1)
							mupenFramerate := moduleIni.Read(romName . "|" . systemName, "Mupen_Framerate", "fullspeed",,1)
							mupenResolution := moduleIni.Read(romName . "|" . systemName, "Mupen_Resolution", "640x480",,1)
							mupenPolyOffstFctr := moduleIni.Read(romName . "|" . systemName, "Mupen_Polygon_Offset_Factor", "-3.0",,1)
							mupenPolyOffstUnts := moduleIni.Read(romName . "|" . systemName, "Mupen_Polygon_Offset_Units", "-3.0",,1)
							mupenViOverlay := moduleIni.Read(romName . "|" . systemName, "Mupen_VI_Overlay", "disabled",,1)
							mupenAnalogDzone := moduleIni.Read(romName . "|" . systemName, "Mupen_Analog_Deadzone", "15",,1)
					
							WriteProperty(coreOptionsCFG, "mupen64-gfxplugin", mupenGfx, 1)
							WriteProperty(coreOptionsCFG, "mupen64-rspplugin", mupenRsp, 1)
							WriteProperty(coreOptionsCFG, "mupen64-cpucore", mupenCpu, 1)
							WriteProperty(coreOptionsCFG, "mupen64-pak1", mupenPak1, 1)
							WriteProperty(coreOptionsCFG, "mupen64-pak2", mupenPak2, 1)
							WriteProperty(coreOptionsCFG, "mupen64-pak3", mupenPak3, 1)
							WriteProperty(coreOptionsCFG, "mupen64-pak4", mupenPak4, 1)
							WriteProperty(coreOptionsCFG, "mupen64-gfxplugin-accuracy", mupenGfxAccur, 1)
							WriteProperty(coreOptionsCFG, "mupen64-disableexpmem", mupenExpMem, 1)
							WriteProperty(coreOptionsCFG, "mupen64-filtering", mupenTexturFilt, 1)
							WriteProperty(coreOptionsCFG, "mupen64-virefresh", mupenViRefresh, 1)
							WriteProperty(coreOptionsCFG, "mupen64-framerate", mupenFramerate, 1)
							WriteProperty(coreOptionsCFG, "mupen64-screensize", mupenResolution, 1)
							WriteProperty(coreOptionsCFG, "mupen64-polyoffset-factor", mupenPolyOffstFctr, 1)
							WriteProperty(coreOptionsCFG, "mupen64-polyoffset-units", mupenPolyOffstUnts, 1)
							WriteProperty(coreOptionsCFG, "mupen64-angrylion-vioverlay", mupenViOverlay, 1)
							WriteProperty(coreOptionsCFG, "mupen64-astick-deadzone", mupenAnalogDzone, 1)
						} Else If StringUtils.Contains(retroID, "LibRetro_NES") {		; these systems will use an ini to store game specific settings
							If StringUtils.Contains(core, "nestopia_libretro") {	; Nestopia
								nestopiaBlargg := moduleIni.Read(romName . "|Nestopia", "Nestopia_Blargg_NTSC_Filter", "disabled",,1)
								nestopiaPalette := moduleIni.Read(romName . "|Nestopia", "Nestopia_Palette", "canonical",,1)
								nestopiaNoSprteLimit := moduleIni.Read(romName . "|Nestopia", "Nestopia_Remove_Sprites_Limit", "disabled",,1)
								
								WriteProperty(coreOptionsCFG, "nestopia_blargg_ntsc_filter", nestopiaBlargg, 1)
								WriteProperty(coreOptionsCFG, "nestopia_palette", nestopiaPalette, 1)
								WriteProperty(coreOptionsCFG, "nestopia_nospritelimit", nestopiaNoSprteLimit, 1)
							}
						} Else If StringUtils.Contains(retroID, "LibRetro_LYNX") {	; Atari Lynx
							If StringUtils.Contains(core, "handy_libretro") {   ; Handy
								handyRotate := moduleIni.Read(romName . "|" . systemName, "Handy_Rotation", "None",,1)
								If StringUtils.Contains(handyRotate, "240") or StringUtils.Contains(handyRotate, "90")
									rotateBezel := true
								WriteProperty(coreOptionsCFG, "handy_rot", handyRotate, 1)
							}
						} Else If StringUtils.Contains(retroID, "LibRetro_PSX") {	; Sony PlayStation
							psxCdImageCache := moduleIni.Read(romName . "|" . systemName, "PSX_CD_Image_Cache", """enabled""",,1)
							psxMemcardHandling := moduleIni.Read(romName . "|" . systemName, "PSX_Memcard_Handling", """libretro""",,1)
							psxDualshockAnalogToggle := moduleIni.Read(romName . "|" . systemName, "PSX_Dualshock_Analog_Toggle", """enabled""",,1)
							
							WriteProperty(coreOptionsCFG, "beetle_psx_cdimagecache", psxCdImageCache, 1)
							WriteProperty(coreOptionsCFG, "beetle_psx_use_mednafen_memcard0_method", psxMemcardHandling, 1)
							WriteProperty(coreOptionsCFG, "beetle_psx_analog_toggle", psxDualshockAnalogToggle, 1)
						}
						SaveProperties(coreOptionsCFGFile.FileFullPath, coreOptionsCFG)
					}
					
					hideEmuObj := Object(emuConsoleWindow,0,emuPrimaryWindow,1)
					7z(romPath, romName, romExtension, sevenZExtractPath)
					
					mgM3UFile := new File(romPath . "\" . romTable[1,4] . ".m3u")
					
					mgRomExtensions := "cue|iso|ccd"
					mgValidExtension := false
					
					Loop, Parse, mgRomExtensions, |
						If (romExtension = "." . A_LoopField)
							mgValidExtension := true
					
					If (StringUtils.Contains(retroID, "LibRetro_PSX") && romTable.MaxIndex() && mgValidExtension) { ; See if MultiGame table is populated	
						m3uRomIndex := Object()
						mgType := romTable[1,6] . " "
						mgMaxIndex := romTable.MaxIndex()
						mgRomIndex := 0
					
						If mgM3UFile.Exist()
							mgM3UFile.Delete()
					
						Loop % mgMaxIndex
						{
							If (romTable[A_Index, 3] = romName) {
								tempType := romTable[A_Index, 5]
								mgRomIndex := StringUtils.TrimLeft(tempType, StringUtils.StringLength(mgType))
								RLLog.Info("Found rom index in rom set in romTable: " . mgRomIndex)
								Break
							}
						}
					
						If (mgRomIndex > 0) {
							tempRomIndex := mgRomIndex
							Loop % mgMaxIndex
							{
								mgTypeIndex := mgType . tempRomIndex
								m3uRomIndex.Insert(tempRomIndex)
					
								Loop % mgMaxIndex
								{
									If (romTable[A_Index, 5] = mgTypeIndex) {
										tempRomPath := romTable[A_Index, 1]
										mgM3UFile.Append(tempRomPath . "`n")
										RLLog.Info("Module - Appending rom path to m3u: " . tempRomPath)
										Break
									}
								}
					
								If (tempRomIndex < mgMaxIndex)
									tempRomIndex++
								Else
									tempRomIndex := 1
							}
						}
					}
					
					; MAME/MESS/UME core options
					MAMEParam1 := ""
					MAMEParam2 := ""
					MAMEParam3 := ""
					If StringUtils.Contains(core, "^(mame|mess|ume)") {	; if a MAME/MESS/UME core is used
						If !retroMAMEID
							ScriptError("Your systemName is: " . systemName . "`nIt is not one of the known supported systems for the MAME/MESS/UME LibRetro core")
						Else
							RLLog.Info("Module - MAME/MESS/UME mode using a known ident: " . retroMAMEID)
					
						If !mameRomPath
							ScriptError("Please set the RetroArch module setting ""BIOS_Roms_Folder"" to the folder that contains your MAME/MESS/UME BIOS roms to use with RetroArch.")
						
						If (retroMAMEID = "mame") {		; want this for arcade mame only
							RLLog.Info("Module - Retroarch MAME/MESS/UME Arcade mode enabled")
							fullRomPath := " """ . romPath . "\" . romName . romExtension . """"
						} Else {
							RLLog.Info("Module - Retroarch MAME/MESS/UME Console/PC mode enabled")
							MAMEParam1 := ""
							MAMEParam2 := " -rompath \""" . mameRomPath . "\"""
					
							; If we already have a media type, then use it.
							If (StringUtils.Contains(retroMAMEID, "tg16|pce") && retroMAMEMedia = "cart") {
								;MAMEParam3 := " -cart \" . """" . romPath . "\" . romName . romExtension . "\" . """"
								MAMEParam3 := " -cart \""" . romPath . "\" . romName . romExtension . "\"""""
							; TODO: This needs a better way to handle the cdrom bios files, in my opinion. As it is, there's no clean way to pick between the v2.00 or v3.00 bios.
							;       Defaulting to the TurboDuo cdrom bios since it will play 2.00 or 3.00 games.
							} Else If (StringUtils.Contains(retroMAMEID, "tg16|pce") && retroMAMEMedia = "cdrom") {
								;MAMEParam3 := " -cart cdsys -cdrm \" . """" . romPath . "\" . romName . romExtension . "\" . """"
								MAMEParam3 := " -cart scdsys -cdrm \""" . romPath . "\" . romName . romExtension . "\"""""
							} Else {
								; Build a key/value object containing the different MAMEParam3 choices
								MAMEP3 := Object("alice32","cass1","gp32","memc","cpc464","cass","spectrum","cass","dragon64","cass","cdimono1","cdrom","bk0010","cass","neocd","cdrom","neocdz","cdrom","saturn","cdrm","saturnjp","cdrm","svi328n","cass","pecom64","cass","psu","cdrm","svmu","quik","gamecom","cart1","mbeeic","quik1")
								MAMEParam3 := MAMEP3[retroMAMEID]	; search object for the retroMAMEID pair
								MAMEParam3 := " -" . (If MAMEParam3 ? MAMEParam3 : "cart") . " \" . """" . romPath . "\" . romName . romExtension . "\" . """"
							}
					
							If (retroMAMEID = "mbeeic") ; Applied Technology MicroBee
							{	microbeeModel := IniReadCheck(MAMESysINI, romName, "MicroBee_Model","mbeeic",,1)
								If microbeeModel not in mbee,mbeeic,mbeepc,mbeepc85,mbee56
									ScriptError("This is not a known MicroBee model value: " . microbeeModel)
								Else If (microbeeModel != "mbeeic")
									retroMAMEID := microbeeModel
								If romExtension in .mwb,.com,.bee
									mediaDeviceType := "quik1"
								Else If romExtension in .wav,.tap
									mediaDeviceType := "cass"
								Else If romExtension in .rom
									mediaDeviceType := "cart"
								Else If romExtension in .dsk
									mediaDeviceType := "flop1"
								Else	; .bin format
									mediaDeviceType := "quik2"
								MAMEParam3 := " -" . mediaDeviceType . " \" . """" . romPath . "\" . romName . romExtension . "\" . """"
							}
							
							If (retroMAMEID = "x68000") ; Sharp X68000
							{	
								If romExtension in .xdf,.hdm,.2hd,.dim,.d77,.d88,.1dd,.dfi,.imd,.ipf,.mfi,.mfm,.td0,.cqm,.cqi,.dsk
									mediaDeviceType := "flop1"
								Else	; .bin format
									mediaDeviceType := "sasi"
								MAMEParam3 := " -" . mediaDeviceType . " \" . """" . romPath . "\" . romName . romExtension . "\" . """"
							}
							
							fullRomPath := MAMEParam1 . MAMEParam2 . MAMEParam3
						}
					} Else If (superGB = "true") {
						RLLog.Info("Module - Retroarch Super Game Boy mode enabled")
						fullRomPath := " """ . sgbRomPath . """ --subsystem sgb """ . romPath . "\" . romName . romExtension . """"
					} Else {
						RLLog.Info("Module - Retroarch standard mode enabled")
						fullRomPath := " """ . romPath . "\" . romName . romExtension . """"
					}
					
					If (retroID = "LibRetro_NFDS")	; Nintendo Famicom Disk System
					{	disksysRom := new File(retroSysDir . "\disksys.rom")
						If !disksysRom.Exist()
							ScriptError("RetroArch requires ""disksys.rom"" for " . retroSystem . " but could not find it in your system_directory: """ . retroSysDir . """")
					} Else If (retroID = "LibRetro_SCD")	; Sega CD
					{	If !StringUtils.Contains(romExtension, "\.bin|\.cue|\.iso")
							ScriptError("RetroArch only supports Sega CD games in bin|cue|iso format. It does not support:`n" . romExtension)
						biosCDEBin := new File(retroSysDir . "\bios_CD_E.bin")
						biosCDUBin := new File(retroSysDir . "\bios_CD_U.bin")
						biosCDJBin := new File(retroSysDir . "\bios_CD_J.bin")
						If !biosCDEBin.Exist()
							ScriptError("RetroArch requires ""bios_CD_E.bin"" for " . retroSystem . " but could not find it in your system_directory: """ . retroSysDir . """")
						If !biosCDUBin.Exist()
							ScriptError("RetroArch requires ""bios_CD_U.bin"" for " . retroSystem . " but could not find it in your system_directory: """ . retroSysDir . """")
						If !biosCDJBin.Exist()
							ScriptError("RetroArch requires ""bios_CD_J.bin"" for " . retroSystem . " but could not find it in your system_directory: """ . retroSysDir . """")
					} Else If StringUtils.Contains(retroID,"LibRetro_PCECD|LibRetro_TGCD")	; NEC PC Engine-CD and NEC TurboGrafx-CD
					{	If !StringUtils.Contains(romExtension,"\.ccd|\.cue")
							ScriptError("RetroArch only supports " . retroSystem . " games in ccd or cue format. It does not support:`n" . romExtension)
						sysCard3Pce := new File(retroSysDir . "\syscard3.pce")
						If !sysCard3Pce.Exist()
							ScriptError("RetroArch requires ""syscard3.pce"" for " . retroSystem . " but could not find it in your system_directory: """ . retroSysDir . """")
					} Else If (retroID = "LibRetro_PCFX")
					{	If !StringUtils.Contains(romExtension,"\.ccd|\.cue")
							ScriptError("RetroArch only supports " . retroSystem . " games in ccd or cue format. It does not support:`n" . romExtension)
						pcfxBios := new File(retroSysDir . "\pcfx.bios")
						If !pcfxBios.Exist()
							ScriptError("RetroArch requires ""pcfx.bios"" for " . retroSystem . " but could not find it in your system_directory: """ . retroSysDir . """")
					} Else If (retroID = "LibRetro_SCUMM")
					{
						scummFile := new File(romPath . "\" . romName . ".scummvm")
						If !scummFile.Exist()
							scummFile.Append("""" . romName . """")
					}
					
					networkSession := ""
					If (enableNetworkPlay = "true") {
						RLLog.Info("Module - Network Multi-Player is an available option for " . dbName)
					
						netplayNickname := moduleIni.Read("Network", "NetPlay_Nickname","Player",,1)
						getWANIP := moduleIni.Read("Network", "Get_WAN_IP","false",,1)
					
						If (getWANIP = "true")
							myPublicIP := GetPublicIP()
					
						RLLog.Warning("Module - CAREFUL WHEN POSTING THIS LOG PUBLICLY AS IT CONTAINS YOUR IP ON THE NEXT LINE")
						defaultServerIP := moduleIni.Read("Network", "Default_Server_IP", myPublicIP,,1)
						defaultServerPort := moduleIni.Read("Network", "Default_Server_Port",,,1)
						lastIP := moduleIni.Read("Network", "Last_IP", defaultServerIP,,1)	; does not need to be on the ISD
						lastPort := moduleIni.Read("Network", "Last_Port", defaultServerPort,,1)	; does not need to be on the ISD
					
						mpMenuStatus := MultiPlayerMenu(lastIP,lastPort,networkType,,0)
						If (mpMenuStatus = -1) {	; if user exited menu early
							RLLog.Warning("Module - Cancelled MultiPlayer Menu. Exiting module.")
							ExitModule()
						}
						If networkSession {
							RLLog.Info("Module - Using a Network for " . dbName)
							moduleIni.Write(networkPort, "GlobalModuleIni", "Network", "Last_Port")
							; msgbox lastIP: %lastIP%`nlastPort: %lastPort%`nnetworkIP: %networkIP%`nnetworkPort: %networkPort%
							If (networkType = "client") {
								moduleIni.Write(networkIP, "GlobalModuleIni", "Network", "Last_IP")	; Save last used IP and Port for quicker launching next time
								netCommand := " -C " . networkIP . " --port " . networkPort . " --nick """ . netplayNickname . """"	; -C = connect as client
							} Else {	; server
								netCommand := " -H --port " . networkPort . " --nick """ . netplayNickname . """"	; -H = host as server
							}
							RLLog.Warning("Module - CAREFUL WHEN POSTING THIS LOG PUBLICLY AS IT CONTAINS YOUR IP ON THE NEXT LINE")
							RLLog.Info("Module - Starting a network session using the IP """ . networkIP . """ and PORT """ . networkPort . """")
						} Else
							RLLog.Info("Module - User chose Single Player mode for this session")
					}
					
					BezelStart(,,(If rotateBezel ? 1:""))
					
					If foundCfg {
						If (stretchToFillBezel = "true" and bezelEnabled = "true" and bezelPath)
						{
							customViewportWidth := bezelScreenWidth
							customViewportHeight := bezelScreenHeight
							customViewportX := 0
							customViewportY := 0
							aspectRatioIndex := 22
							RLLog.Info("Stretching viewport to fit bezel")
						}
					
						raCfgHasChanges := ""
						WriteRetroProperty("core_options_path", singlecoreoptions)
						WriteRetroProperty("input_overlay", overlay)
						WriteRetroProperty("video_shader", videoShader)
						WriteRetroProperty("aspect_ratio_index", aspectRatioIndex)
						WriteRetroProperty("custom_viewport_width", customViewportWidth)
						WriteRetroProperty("custom_viewport_height", customViewportHeight)
						WriteRetroProperty("custom_viewport_x", customViewportX)
						WriteRetroProperty("custom_viewport_y", customViewportY)
						WriteRetroProperty("video_rotation", rotation)
						WriteRetroProperty("video_crop_overscan", cropOverscan)
						WriteRetroProperty("video_threaded", threadedVideo)
						WriteRetroProperty("video_vsync", vSync)
						WriteRetroProperty("video_scale_integer", integerScale)
						WriteRetroProperty("input_disk_eject_toggle", ejectToggleKey)
						WriteRetroProperty("input_disk_next", nextDiskKey)
						WriteRetroProperty("input_disk_prev", prevDiskKey)
						If StringUtils.Contains(retroID, "LibRetro_PSX") {
							Loop, 8	; Loop 8 times for 8 controllers
							{	p%A_Index%ControllerType := moduleIni.Read(romName . "|" . systemName, "P" . A_Index . "_Controller_Type", 517,,1)
								WriteRetroProperty("input_libretro_device_p" . A_Index, p%A_Index%ControllerType)
							}
						}
					
						If raCfgHasChanges {
							RLLog.Info("Module - Saving changed settings to: """ . retroCFGFile.FileFullPath . """")
							SaveProperties(retroCFGFile.FileFullPath, retroCFG)
						}
					}
					
					fullscreen := If fullscreen = "true" ? " -f" : ""
					retroCFGFileCLI := If foundCfg ? " -c """ . retroCFGFile.FileFullPath . """" : ""
					
					
					
					HideAppStart(hideEmuObj,hideEmu)
					
					If (StringUtils.Contains(core, "^(mame|mess|ume)") && (retroMAMEID != "mame")) {    ; if a MAME/MESS/UME core is used
						primaryExe.Run(" """ . (retroMAMEID ? retroMAMEID : "") . fullRomPath . """ " . fullscreen . retroCFGFileCLI . " -L """ . libDll . netCommand, "Hide")
					} Else If (retroID = "LibRetro_SCUMM") {
						primaryExe.Run(" """ . scummFile . """" . fullscreen . retroCFGFileCLI . " -L """ . libDll . "" . netCommand, "Hide")
					} Else If (retroID = "LibRetro_SGB" || If superGB = "true") { ; For some reason, the order of our command line matters in this particular case.
						primaryExe.Run(fullscreen . retroCFGFileCLI . " -L """ . libDll . fullRomPath . netCommand, "Hide")
					} Else If mgM3UFile.Exist() {
						primaryExe.Run(" """ . mgM3UFile.FileFullPath . """" . fullscreen . retroCFGFileCLI . " -L """ . libDll . netCommand, "Hide")
					} Else {
						primaryExe.Run(" " . fullRomPath . fullscreen . retroCFGFileCLI . " -L """ . libDll . netCommand, "Hide")
					}
					
					mpMenuStatus := ""
					If networkSession {
						canceledServerWait := false
						multiplayerMenuExit := false
						TimerUtils.SetTimer("NetworkConnectedCheck", 500)
					
						If (networkType = "server") {
							RLLog.Info("Module - Waiting for a client to connect to your server")
							mpMenuStatus := MultiPlayerMenu(,,,,,,,,"You are the server. Please wait for your client to connect.")
						} Else {	; client
							RLLog.Info("Module - Trying to contact the server to establish a connection.")
							mpMenuStatus := MultiPlayerMenu(,,,,,,,,"Attempting to connect to the server...")
						}
					
						If (mpMenuStatus = -1) {	; if user exited menu early before a client connected
							RLLog.Warning("Module - Cancelled waiting for the " . If (networkType = "server") ? "client to connect" : "server to respond" . ". Exiting module.")
							If primaryExe.Process("Exist")
								primaryExe.Process("Close")	; must close process as the exe is waiting for a client to connect and no window was drawn yet
							ExitModule()
						} Else {	; blank response from MultiPlayerMenu, exited properly
							RLLog.Info("Module - " . If (networkType = "server") ? "Client has connected" : "Connected to the server")
							emuPrimaryWindow.Wait()
							emuPrimaryWindow.WaitActive()
						}
						TimerUtils.SetTimer("NetworkConnectedCheck", "Off")
					} Else {	; single player
						emuPrimaryWindow.Wait()
						emuPrimaryWindow.WaitActive()
					}
					
					If (hideConsole = "true")
						emuConsoleWindow.Set("Transparent", "On")	; makes the console window transparent so you don't see it on exit
					
					BezelDraw()
					HideAppEnd(hideEmuObj,hideEmu)
					FadeInExit()
					primaryExe.Process("WaitClose")
					7zCleanUp()
					BezelExit()
					FadeOutExit()
					ExitModule()
					
					
					; Writes new properties into the retroCFG if defined by user
					WriteRetroProperty(key,value="") {
						If (value != "") {
							Global retroCFG,raCfgHasChanges
							WriteProperty(retroCFG, key, value,1,1)
							raCfgHasChanges := 1
						}
					}
					
					; Used to convert between RetroArch keys and usable data
					ConvertRetroCFGKey(txt,direction="read"){
						Global emuPath,RLLog
						If (direction = "read")
						{	newtxt := StringUtils.TrimLeft(txt,1,0)	; removes the " from the left of the txt
							newtxt := StringUtils.TrimRight(newtxt,1,0)	; removes the " from the right of the txt
							relativeCheck := StringUtils.SubStr(newtxt,1,1,0)
							If StringUtils.Contains(relativeCheck,":",0) {	; if the path contains a ":" then it is a relative path
								RLLog.Debug("ConvertRetroCFGKey - " . newtxt . " is a relative path")
								newtxt := StringUtils.TrimLeft(newtxt,1,0)	; removes the : from the left of the txt
								newtxt := AbsoluteFromRelative(emuPath, "." . newtxt)	; convert relative to absolute
							}
							If StringUtils.Contains(newtxt,"/",0)
								newtxt := StringUtils.Replace(newtxt,"/","\",1,,0)	; replaces all forward slashes with backslashes
						} Else If (direction = "write")
						{	newtxt := """" . txt . """"	; wraps the txt with ""
							If StringUtils.Contains(newtxt,"\\",0)
								newtxt := StringUtils.Replace(newtxt,"\","/",1,,0)	; replaces all backslashes with forward slashes
						} Else
							ScriptError("Not a valid use of ConvertRetroCFGKey. Only ""read"" or ""write"" are supported.")
						RLLog.Debug("ConvertRetroCFGKey - Converted " . txt . " to " . newtxt)
						Return newtxt
					}
					
					MultiGame:
						KeyUtils.SetKeyDelay(100)
						emuPrimaryWindow.Activate()
						KeyUtils.Send("{" . ejectToggleKey . " down}{" . ejectToggleKey . " up}")	; eject disc in Retroarch
						If (!mgLastRomIndex) {
							mgLastRomIndex := mgRomIndex
						}
						selectedRomIndex := 0
						selectedRomIndex := StringUtils.TrimLeft(selectedRomNum, StringUtils.StringLength(mgType,0))
						
						Loop % mgMaxIndex
						{
							If (m3uRomIndex[A_index] = mgLastRomIndex) {
								tempLastRomIndex := A_index
								RLLog.Debug("Module - Last index: " . tempLastRomIndex)
							}
							If (m3uRomIndex[A_index] = selectedRomIndex) {
								tempSelectedRomIndex := A_index
								RLLog.Debug("Module - Selected index: " . tempSelectedRomIndex)
							}
						}
						
						mgNewIndex := tempLastRomIndex - tempSelectedRomIndex
						
						If (mgNewIndex < 0) {
							mgNewIndex := mgNewIndex * -1
							Loop % mgNewIndex
							{
								RLLog.Debug("Module - Sending the next disk key: " . nextDiskKey)
								KeyUtils.Send("{" . nextDiskKey . " down}{" . nextDiskKey . " up}")
							}
						} Else If (mgNewIndex > 0) {
							Loop % mgNewIndex
							{
								RLLog.Debug("Module - Sending the previous disk key: " . mgNewIndex)
								KeyUtils.Send("{" . prevDiskKey . " down}{" . prevDiskKey . " up}")
							}
						}
						
						KeyUtils.Send("{" . ejectToggleKey . " down}{" . ejectToggleKey . " up}")	; close disc in Retroarch
						mgLastRomIndex := selectedRomIndex
					Return
					
					NetworkConnectedCheck:
						If clientConnected
							multiplayerMenuExit := true
						Else If emuPrimaryWindow.Exist() {
							RLLog.Info("Module - RetroArch session started, closing the MultiPlayer menu")
							multiplayerMenuExit := true
						}
					Return
					
					CloseProcess:
						FadeOutStart()
						emuPrimaryWindow.Close()
					Return

20:58:32:138 | RL |      INFO  | +32    | BuildScript - Loaded Multi-Player scripts
20:58:32:143 | RL |      INFO  | +0     | BuildScript - Loaded Statistics.ahk script
20:58:32:143 | RL |   WARNING  | +0     | BuildScript - "D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher\Lib\User Functions.ahk" not found
20:58:32:143 | RL |      INFO  | +0     | BuildScript - Finished injecting functions into module
20:58:32:144 | RL |      INFO  | +0     | Main - Module is built
20:58:32:144 | RL |      INFO  | +0     | CheckFile - Checking if D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher\AutoHotkey.dll exists
20:58:32:146 | RL |      INFO  | +0     | Main - Hiding taskbar
20:58:32:266 | RL |      INFO  | +125   | Main - Running module
20:58:32:468 | MD |      INFO  | +N/A   | Module initialized
20:58:32:470 | MD |      INFO  | +0     | StartModule - Started
20:58:32:470 | MD |      INFO  | +0     | StartModule - MEmu: RetroArch
					MEmuV: v1.3.6
					MURL: 
					MAuthor: 
					MVersion: 2.4.3
					MCRC: 699AB8F7
					iCRC: FB2DB971
					MID: 
					MSystem: 
20:58:32:470 | MD |   WARNING  | +0     | StartModule - You have an unsupported System Name for this module: "Nintendo Entertainment System". Only the following System Names are suppported: ""
20:58:32:471 | MD |      INFO  | +0     | PluginInit - Started
20:58:32:471 | MD |      INFO  | +0     | CheckFile - Checking if D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher\RocketLauncherUI\Databases\Nintendo Entertainment System\Nintendo Entertainment System.xml exists
20:58:32:473 | MD |      INFO  | +0     | BuildAssetsTable - Started - Building Table for: Game Logo|System Logo
20:58:32:473 | MD |      INFO  | +0     | BuildAssetsTable - Ended
20:58:32:473 | MD |      INFO  | +0     | BuildAssetsTable - Started - Building Table for: Artwork1|Box Art|Cartridge|Flyers|Letters|Other
20:58:32:474 | MD |      INFO  | +0     | BuildAssetsTable - Ended
20:58:32:474 | MD |      INFO  | +0     | BuildAssetsTable - Started - Building Table for: Game Video|System Video
20:58:32:474 | MD |      INFO  | +0     | BuildAssetsTable - Ended
20:58:32:474 | MD |      INFO  | +0     | PluginInit - Ended
20:58:32:498 | MD |      INFO  | +31    | SystemCursor - Hiding mouse cursor
20:58:32:589 | MD |      INFO  | +94    | StartModule - Ended
20:58:32:589 | MD |      INFO  | +0     | BezelGUI - Started
20:58:32:731 | MD |      INFO  | +140   | BezelGUI - Ended
20:58:32:732 | MD |      INFO  | +0     | GetFadePicFile - Randomized images and Fade  will use D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher\Media\Fade\Nintendo Entertainment System\_Default\Layer 1 - nosh.png
20:58:32:733 | MD |      INFO  | +0     | GetFadePicFile - Randomized images and Fade  will use D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher\Media\Fade\Nintendo Entertainment System\_Default\Extra Layer 1 - Console - nosh.png
20:58:32:934 | MD |      INFO  | +204   | DefaultAnimateFadeIn - Started, direction is: in
20:58:32:934 | MD |      INFO  | +0     | DefaultAnimateFadeIn - Drawing First FadeIn Image.
20:58:33:438 | MD |      INFO  | +500   | DefaultAnimateFadeIn - Ended
20:58:33:565 | MD |      INFO  | +125   | DefaultFadeAnimation - Started
20:58:33:566 | MD |      INFO  | +0     | GetFadePicFile - Randomized images and Fade  will use D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher\Media\Fade\_Default\Info Bar - nosh.png
20:58:33:607 | MD |      INFO  | +46    | BuildAssetsTable - Started - Building Table for: Genre Logo|Rating Logo|Developer Logo|Publisher Logo|Year Logo
20:58:33:607 | MD |      INFO  | +0     | BuildAssetsTable - Ended
20:58:33:607 | MD |      INFO  | +0     | BuildAssetsTable - Started - Building Table for: System Logo|Game Logo|Game Logo
20:58:33:608 | MD |      INFO  | +0     | BuildAssetsTable - Ended
20:58:33:639 | MD |      INFO  | +32    | DefaultFadeAnimation - Ended
20:58:33:639 | MD |      INFO  | +0     | DxwndUpdateIniPath - DxwndIni set to D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher\Module Extensions\dxwnd\dxwnd.ini
20:58:33:643 | MD |      INFO  | +0     | Module - Using these system variables:
20:58:33:643 | MD |      INFO  | +0     | Module - retroSystem: Nintendo Entertainment System
20:58:33:643 | MD |      INFO  | +0     | Module - retroID: LibRetro_NES
20:58:33:643 | MD |      INFO  | +0     | Module - retroCore: nestopia_libretro
20:58:33:643 | MD |      INFO  | +0     | Module - retroMAMEID: nes
20:58:33:643 | MD |      INFO  | +0     | Module - retroMAMEMedia: cdrom
20:58:33:643 | MD |      INFO  | +0     | RIniFile.Read - Module {GlobalModuleIni} - [Settings] - Fullscreen: true
20:58:33:643 | MD |      INFO  | +0     | RIniFile.Read - Module - ConfigFolder: D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RetroArch\config (DEFAULT)
20:58:33:643 | MD |      INFO  | +0     | RIniFile.Read - Module - single_core_options: false (DEFAULT)
20:58:33:644 | MD |      INFO  | +0     | RIniFile.Read - Module - BIOS_Roms_Folder: (NO VALUE)
20:58:33:644 | MD |      INFO  | +0     | RIniFile.Read - Module - Hide_Nag_Screen: false (DEFAULT)
20:58:33:644 | MD |      INFO  | +0     | RIniFile.Read - Module - Hide_Info_Screen: false (DEFAULT)
20:58:33:644 | MD |      INFO  | +0     | RIniFile.Read - Module - Hide_Warning_Screen: false (DEFAULT)
20:58:33:644 | MD |      INFO  | +0     | RIniFile.Read - Module {GlobalModuleIni} - [Settings] - HideConsole: true
20:58:33:644 | MD |      INFO  | +0     | RIniFile.Read - Module - Eject_Toggle_Key: (NO VALUE)
20:58:33:644 | MD |      INFO  | +0     | RIniFile.Read - Module - Next_Disk_Key: (NO VALUE)
20:58:33:644 | MD |      INFO  | +0     | RIniFile.Read - Module - Previous_Disk_Key: (NO VALUE)
20:58:33:644 | MD |      INFO  | +0     | RIniFile.Read - Module {GlobalModuleIni} - [Nintendo Entertainment System] - LibRetro_Core: fceumm_libretro
20:58:33:644 | MD |      INFO  | +0     | RIniFile.Read - Module - SuperGameBoy: false (DEFAULT)
20:58:33:644 | MD |      INFO  | +0     | RIniFile.Read - Module - Enable_Network_Play: false (DEFAULT)
20:58:33:644 | MD |      INFO  | +0     | RIniFile.Read - Module - Overlay: (NO VALUE)
20:58:33:644 | MD |      INFO  | +0     | RIniFile.Read - Module - VideoShader: (NO VALUE)
20:58:33:644 | MD |      INFO  | +0     | RIniFile.Read - Module - AspectRatioIndex: (NO VALUE)
20:58:33:644 | MD |      INFO  | +0     | RIniFile.Read - Module - CustomViewportWidth: (NO VALUE)
20:58:33:644 | MD |      INFO  | +0     | RIniFile.Read - Module - CustomViewportHeight: (NO VALUE)
20:58:33:644 | MD |      INFO  | +0     | RIniFile.Read - Module - CustomViewportX: (NO VALUE)
20:58:33:644 | MD |      INFO  | +0     | RIniFile.Read - Module - CustomViewportY: (NO VALUE)
20:58:33:644 | MD |      INFO  | +0     | RIniFile.Read - Module {GlobalModuleIni} - [Nintendo Entertainment System] - StretchToFillBezel: true
20:58:33:644 | MD |      INFO  | +0     | RIniFile.Read - Module - Rotation: 0 (DEFAULT)
20:58:33:644 | MD |      INFO  | +0     | RIniFile.Read - Module {GlobalModuleIni} - [Nintendo Entertainment System] - CropOverscan: true
20:58:33:644 | MD |      INFO  | +0     | RIniFile.Read - Module {GlobalModuleIni} - [Nintendo Entertainment System] - ThreadedVideo: true
20:58:33:644 | MD |      INFO  | +0     | RIniFile.Read - Module - VSync: (NO VALUE)
20:58:33:644 | MD |      INFO  | +0     | RIniFile.Read - Module {GlobalModuleIni} - [Nintendo Entertainment System] - IntegerScale: true
20:58:33:645 | MD |      INFO  | +0     | RIniFile.Read - Module - ConfigurationPerCore: false (DEFAULT)
20:58:33:645 | MD |      INFO  | +0     | CheckFile - Checking if D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RetroArch\cores\fceumm_libretro.dll exists
20:58:33:645 | MD |      INFO  | +0     | Module - Global cfg should be: D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RetroArch\retroarch.cfg
20:58:33:645 | MD |      INFO  | +0     | Module - System cfg should be: D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RetroArch\config\Nintendo Entertainment System.cfg
20:58:33:645 | MD |      INFO  | +0     | Module - Core cfg should be: D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RetroArch\config\fceumm_libretro.cfg
20:58:33:645 | MD |      INFO  | +0     | Module - Found a Global cfg!
20:58:33:645 | MD |      INFO  | +0     | Module - RetroArch is using D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RetroArch\retroarch.cfg as its config file.
20:58:33:645 | MD |      INFO  | +0     | LoadProperties - Started and loading this cfg into memory: D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RetroArch\retroarch.cfg
20:58:33:646 | MD |      INFO  | +0     | LoadProperties - Ended
20:58:33:646 | MD |      INFO  | +0     | Module - Reading / creating system ini for specific settings.
20:58:33:646 | MD |      INFO  | +0     | LoadProperties - Started and loading this cfg into memory: 
20:58:33:646 | MD |      INFO  | +0     | LoadProperties - Ended
20:58:33:668 | MD |      INFO  | +31    | SaveProperties - Started and saving this cfg to disk: 
20:58:33:668 | MD |      INFO  | +0     | SaveProperties - Ended
20:58:33:668 | MD |      INFO  | +0     | Module - Retroarch standard mode enabled
20:58:33:668 | MD |      INFO  | +0     | BezelStart - Started
20:58:33:705 | MD |      INFO  | +31    | DefaultFadeAnimationLoop - percentage
20:58:33:768 | MD |      INFO  | +63    | DefaultFadeAnimationLoop - percentage100
20:58:33:830 | MD |      INFO  | +62    | Bezel - Game will be moved to monitor 1 if RL finds a valid bezel to be show.
20:58:33:833 | MD |      INFO  | +0     | Bezel - Loading Bezel image: D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher\Media\Bezels\Nintendo Entertainment System\_Default\Bezel - horizontal.png
20:58:33:854 | MD |      INFO  | +31    | Bezel - Loading Background image: D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RocketLauncher\Media\Bezels\_Default\Background4 Nosh.png
20:58:33:863 | MD |      INFO  | +0     | BezelStart - Ended
20:58:33:863 | MD |      INFO  | +0     | Stretching viewport to fit bezel
20:58:33:976 | MD |      INFO  | +125   | Module - Saving changed settings to: "D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RetroArch\retroarch.cfg"
20:58:33:977 | MD |      INFO  | +0     | SaveProperties - Started and saving this cfg to disk: D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RetroArch\retroarch.cfg
20:58:33:016 | MD |      INFO  | +32    | SaveProperties - Ended
20:58:34:017 | MD |      INFO  | +0     | Process.Run - Running: D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RetroArch\retroarch.exe  "D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Roms\nes\8 Eyes (USA).zip" -c "D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RetroArch\retroarch.cfg" -L "D:\RETROSHUR-PREFINAL\RETROSHUR-FRONTEND\Emuladores\RetroArch\cores\fceumm_libretro.dll
20:58:34:088 | MD |      INFO  | +78    | Window.Wait - Waiting for window "RetroArch ahk_class RetroArch"
20:58:34:274 | MD |      INFO  | +187   | Window.WaitActive - Waiting for "RetroArch ahk_class RetroArch"
20:58:35:134 | MD |      INFO  | +860   | BezelDraw - Started
20:58:35:238 | MD |      INFO  | +93    | Bezel - Bezel Screen Offset: left= top= right= bottom=
20:58:35:389 | MD |      INFO  | +157   | ToggleMenu - Started
20:58:35:919 | MD |   WARNING  | +531   | ToggleMenu - Timed out trying to restore MenuBar for 0x470a58
20:58:35:919 | MD |      INFO  | +0     | ToggleMenu - Ended
20:58:36:480 | MD |      INFO  | +562   | BezelDraw - Ended
20:58:36:483 | MD |      INFO  | +0     | DefaultAnimateFadeIn - Started, direction is: out
20:58:36:984 | MD |      INFO  | +500   | DefaultAnimateFadeIn - Ended
20:58:37:098 | MD |      INFO  | +110   | Process.Process - "WaitClose" "retroarch.exe" 
20:58:39:127 | MD |      INFO  | +2031  | BezelExit - Started
20:58:39:151 | MD |      INFO  | +31    | Bezel - Removing bezel image components to exit RocketLauncher.
20:58:39:153 | MD |      INFO  | +0     | BezelExit - Ended
20:58:39:153 | MD |      INFO  | +0     | ExitModule - Started
20:58:39:153 | MD |      INFO  | +0     | Starting Updating Statistics:
20:58:39:308 | MD |      INFO  | +157   | Game section statistics updated.
20:58:39:308 | MD |      INFO  | +0     | ExitModule - Ended
End of Module Logs
20:58:39:352 | RL |      INFO  | +7093  | Main - Module ended, exiting RocketLauncher normally
20:58:39:352 | RL |      INFO  | +0     | ExitScript - Started
20:58:39:365 | RL |      INFO  | +16    | ExitScript - Checking what application is currently in focus.
20:58:39:365 | RL |      INFO  | +0     | ExitScript - C:\WINDOWS\system32\cmd.exe is currently active. Putting focus back on RocketLauncherUI.exe with PID of 10068
20:58:39:605 | RL |      INFO  | +234   | ExitScript - Restoring taskbar
20:58:39:735 | RL |      INFO  | +125   | SystemCursor - Restoring mouse cursor
20:58:39:748 | RL |      INFO  | +16    | ExitScript - Restored cursor
[/code]
